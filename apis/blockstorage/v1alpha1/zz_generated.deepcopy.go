//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AttachmentInitParameters) DeepCopyInto(out *AttachmentInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AttachmentInitParameters.
func (in *AttachmentInitParameters) DeepCopy() *AttachmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(AttachmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AttachmentObservation) DeepCopyInto(out *AttachmentObservation) {
	*out = *in
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstanceID != nil {
		in, out := &in.InstanceID, &out.InstanceID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AttachmentObservation.
func (in *AttachmentObservation) DeepCopy() *AttachmentObservation {
	if in == nil {
		return nil
	}
	out := new(AttachmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AttachmentParameters) DeepCopyInto(out *AttachmentParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AttachmentParameters.
func (in *AttachmentParameters) DeepCopy() *AttachmentParameters {
	if in == nil {
		return nil
	}
	out := new(AttachmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3) DeepCopyInto(out *QosAssociationV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3.
func (in *QosAssociationV3) DeepCopy() *QosAssociationV3 {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QosAssociationV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3InitParameters) DeepCopyInto(out *QosAssociationV3InitParameters) {
	*out = *in
	if in.QosID != nil {
		in, out := &in.QosID, &out.QosID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3InitParameters.
func (in *QosAssociationV3InitParameters) DeepCopy() *QosAssociationV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3List) DeepCopyInto(out *QosAssociationV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]QosAssociationV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3List.
func (in *QosAssociationV3List) DeepCopy() *QosAssociationV3List {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QosAssociationV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3Observation) DeepCopyInto(out *QosAssociationV3Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.QosID != nil {
		in, out := &in.QosID, &out.QosID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3Observation.
func (in *QosAssociationV3Observation) DeepCopy() *QosAssociationV3Observation {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3Parameters) DeepCopyInto(out *QosAssociationV3Parameters) {
	*out = *in
	if in.QosID != nil {
		in, out := &in.QosID, &out.QosID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3Parameters.
func (in *QosAssociationV3Parameters) DeepCopy() *QosAssociationV3Parameters {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3Spec) DeepCopyInto(out *QosAssociationV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3Spec.
func (in *QosAssociationV3Spec) DeepCopy() *QosAssociationV3Spec {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosAssociationV3Status) DeepCopyInto(out *QosAssociationV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosAssociationV3Status.
func (in *QosAssociationV3Status) DeepCopy() *QosAssociationV3Status {
	if in == nil {
		return nil
	}
	out := new(QosAssociationV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3) DeepCopyInto(out *QosV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3.
func (in *QosV3) DeepCopy() *QosV3 {
	if in == nil {
		return nil
	}
	out := new(QosV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QosV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3InitParameters) DeepCopyInto(out *QosV3InitParameters) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Specs != nil {
		in, out := &in.Specs, &out.Specs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3InitParameters.
func (in *QosV3InitParameters) DeepCopy() *QosV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(QosV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3List) DeepCopyInto(out *QosV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]QosV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3List.
func (in *QosV3List) DeepCopy() *QosV3List {
	if in == nil {
		return nil
	}
	out := new(QosV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QosV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3Observation) DeepCopyInto(out *QosV3Observation) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Specs != nil {
		in, out := &in.Specs, &out.Specs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3Observation.
func (in *QosV3Observation) DeepCopy() *QosV3Observation {
	if in == nil {
		return nil
	}
	out := new(QosV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3Parameters) DeepCopyInto(out *QosV3Parameters) {
	*out = *in
	if in.Consumer != nil {
		in, out := &in.Consumer, &out.Consumer
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Specs != nil {
		in, out := &in.Specs, &out.Specs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3Parameters.
func (in *QosV3Parameters) DeepCopy() *QosV3Parameters {
	if in == nil {
		return nil
	}
	out := new(QosV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3Spec) DeepCopyInto(out *QosV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3Spec.
func (in *QosV3Spec) DeepCopy() *QosV3Spec {
	if in == nil {
		return nil
	}
	out := new(QosV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QosV3Status) DeepCopyInto(out *QosV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QosV3Status.
func (in *QosV3Status) DeepCopy() *QosV3Status {
	if in == nil {
		return nil
	}
	out := new(QosV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3) DeepCopyInto(out *QuotasetV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3.
func (in *QuotasetV3) DeepCopy() *QuotasetV3 {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QuotasetV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3InitParameters) DeepCopyInto(out *QuotasetV3InitParameters) {
	*out = *in
	if in.BackupGigabytes != nil {
		in, out := &in.BackupGigabytes, &out.BackupGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Backups != nil {
		in, out := &in.Backups, &out.Backups
		*out = new(float64)
		**out = **in
	}
	if in.Gigabytes != nil {
		in, out := &in.Gigabytes, &out.Gigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = new(float64)
		**out = **in
	}
	if in.PerVolumeGigabytes != nil {
		in, out := &in.PerVolumeGigabytes, &out.PerVolumeGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Snapshots != nil {
		in, out := &in.Snapshots, &out.Snapshots
		*out = new(float64)
		**out = **in
	}
	if in.VolumeTypeQuota != nil {
		in, out := &in.VolumeTypeQuota, &out.VolumeTypeQuota
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3InitParameters.
func (in *QuotasetV3InitParameters) DeepCopy() *QuotasetV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3List) DeepCopyInto(out *QuotasetV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]QuotasetV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3List.
func (in *QuotasetV3List) DeepCopy() *QuotasetV3List {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *QuotasetV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3Observation) DeepCopyInto(out *QuotasetV3Observation) {
	*out = *in
	if in.BackupGigabytes != nil {
		in, out := &in.BackupGigabytes, &out.BackupGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Backups != nil {
		in, out := &in.Backups, &out.Backups
		*out = new(float64)
		**out = **in
	}
	if in.Gigabytes != nil {
		in, out := &in.Gigabytes, &out.Gigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.PerVolumeGigabytes != nil {
		in, out := &in.PerVolumeGigabytes, &out.PerVolumeGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Snapshots != nil {
		in, out := &in.Snapshots, &out.Snapshots
		*out = new(float64)
		**out = **in
	}
	if in.VolumeTypeQuota != nil {
		in, out := &in.VolumeTypeQuota, &out.VolumeTypeQuota
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3Observation.
func (in *QuotasetV3Observation) DeepCopy() *QuotasetV3Observation {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3Parameters) DeepCopyInto(out *QuotasetV3Parameters) {
	*out = *in
	if in.BackupGigabytes != nil {
		in, out := &in.BackupGigabytes, &out.BackupGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Backups != nil {
		in, out := &in.Backups, &out.Backups
		*out = new(float64)
		**out = **in
	}
	if in.Gigabytes != nil {
		in, out := &in.Gigabytes, &out.Gigabytes
		*out = new(float64)
		**out = **in
	}
	if in.Groups != nil {
		in, out := &in.Groups, &out.Groups
		*out = new(float64)
		**out = **in
	}
	if in.PerVolumeGigabytes != nil {
		in, out := &in.PerVolumeGigabytes, &out.PerVolumeGigabytes
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.ProjectIDRef != nil {
		in, out := &in.ProjectIDRef, &out.ProjectIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ProjectIDSelector != nil {
		in, out := &in.ProjectIDSelector, &out.ProjectIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Snapshots != nil {
		in, out := &in.Snapshots, &out.Snapshots
		*out = new(float64)
		**out = **in
	}
	if in.VolumeTypeQuota != nil {
		in, out := &in.VolumeTypeQuota, &out.VolumeTypeQuota
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3Parameters.
func (in *QuotasetV3Parameters) DeepCopy() *QuotasetV3Parameters {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3Spec) DeepCopyInto(out *QuotasetV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3Spec.
func (in *QuotasetV3Spec) DeepCopy() *QuotasetV3Spec {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotasetV3Status) DeepCopyInto(out *QuotasetV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotasetV3Status.
func (in *QuotasetV3Status) DeepCopy() *QuotasetV3Status {
	if in == nil {
		return nil
	}
	out := new(QuotasetV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsInitParameters) DeepCopyInto(out *SchedulerHintsInitParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DifferentHost != nil {
		in, out := &in.DifferentHost, &out.DifferentHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LocalToInstance != nil {
		in, out := &in.LocalToInstance, &out.LocalToInstance
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.SameHost != nil {
		in, out := &in.SameHost, &out.SameHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsInitParameters.
func (in *SchedulerHintsInitParameters) DeepCopy() *SchedulerHintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsObservation) DeepCopyInto(out *SchedulerHintsObservation) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DifferentHost != nil {
		in, out := &in.DifferentHost, &out.DifferentHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LocalToInstance != nil {
		in, out := &in.LocalToInstance, &out.LocalToInstance
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.SameHost != nil {
		in, out := &in.SameHost, &out.SameHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsObservation.
func (in *SchedulerHintsObservation) DeepCopy() *SchedulerHintsObservation {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulerHintsParameters) DeepCopyInto(out *SchedulerHintsParameters) {
	*out = *in
	if in.AdditionalProperties != nil {
		in, out := &in.AdditionalProperties, &out.AdditionalProperties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DifferentHost != nil {
		in, out := &in.DifferentHost, &out.DifferentHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.LocalToInstance != nil {
		in, out := &in.LocalToInstance, &out.LocalToInstance
		*out = new(string)
		**out = **in
	}
	if in.Query != nil {
		in, out := &in.Query, &out.Query
		*out = new(string)
		**out = **in
	}
	if in.SameHost != nil {
		in, out := &in.SameHost, &out.SameHost
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulerHintsParameters.
func (in *SchedulerHintsParameters) DeepCopy() *SchedulerHintsParameters {
	if in == nil {
		return nil
	}
	out := new(SchedulerHintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3) DeepCopyInto(out *VolumeAttachV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3.
func (in *VolumeAttachV3) DeepCopy() *VolumeAttachV3 {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeAttachV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3InitParameters) DeepCopyInto(out *VolumeAttachV3InitParameters) {
	*out = *in
	if in.AttachMode != nil {
		in, out := &in.AttachMode, &out.AttachMode
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.Initiator != nil {
		in, out := &in.Initiator, &out.Initiator
		*out = new(string)
		**out = **in
	}
	if in.Multipath != nil {
		in, out := &in.Multipath, &out.Multipath
		*out = new(bool)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
	if in.Wwnn != nil {
		in, out := &in.Wwnn, &out.Wwnn
		*out = new(string)
		**out = **in
	}
	if in.Wwpn != nil {
		in, out := &in.Wwpn, &out.Wwpn
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3InitParameters.
func (in *VolumeAttachV3InitParameters) DeepCopy() *VolumeAttachV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3List) DeepCopyInto(out *VolumeAttachV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VolumeAttachV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3List.
func (in *VolumeAttachV3List) DeepCopy() *VolumeAttachV3List {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeAttachV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3Observation) DeepCopyInto(out *VolumeAttachV3Observation) {
	*out = *in
	if in.AttachMode != nil {
		in, out := &in.AttachMode, &out.AttachMode
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.DriverVolumeType != nil {
		in, out := &in.DriverVolumeType, &out.DriverVolumeType
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.Initiator != nil {
		in, out := &in.Initiator, &out.Initiator
		*out = new(string)
		**out = **in
	}
	if in.MountPointBase != nil {
		in, out := &in.MountPointBase, &out.MountPointBase
		*out = new(string)
		**out = **in
	}
	if in.Multipath != nil {
		in, out := &in.Multipath, &out.Multipath
		*out = new(bool)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
	if in.Wwnn != nil {
		in, out := &in.Wwnn, &out.Wwnn
		*out = new(string)
		**out = **in
	}
	if in.Wwpn != nil {
		in, out := &in.Wwpn, &out.Wwpn
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3Observation.
func (in *VolumeAttachV3Observation) DeepCopy() *VolumeAttachV3Observation {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3Parameters) DeepCopyInto(out *VolumeAttachV3Parameters) {
	*out = *in
	if in.AttachMode != nil {
		in, out := &in.AttachMode, &out.AttachMode
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.HostName != nil {
		in, out := &in.HostName, &out.HostName
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.Initiator != nil {
		in, out := &in.Initiator, &out.Initiator
		*out = new(string)
		**out = **in
	}
	if in.Multipath != nil {
		in, out := &in.Multipath, &out.Multipath
		*out = new(bool)
		**out = **in
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeID != nil {
		in, out := &in.VolumeID, &out.VolumeID
		*out = new(string)
		**out = **in
	}
	if in.Wwnn != nil {
		in, out := &in.Wwnn, &out.Wwnn
		*out = new(string)
		**out = **in
	}
	if in.Wwpn != nil {
		in, out := &in.Wwpn, &out.Wwpn
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3Parameters.
func (in *VolumeAttachV3Parameters) DeepCopy() *VolumeAttachV3Parameters {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3Spec) DeepCopyInto(out *VolumeAttachV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3Spec.
func (in *VolumeAttachV3Spec) DeepCopy() *VolumeAttachV3Spec {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeAttachV3Status) DeepCopyInto(out *VolumeAttachV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeAttachV3Status.
func (in *VolumeAttachV3Status) DeepCopy() *VolumeAttachV3Status {
	if in == nil {
		return nil
	}
	out := new(VolumeAttachV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3) DeepCopyInto(out *VolumeTypeAccessV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3.
func (in *VolumeTypeAccessV3) DeepCopy() *VolumeTypeAccessV3 {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeTypeAccessV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3InitParameters) DeepCopyInto(out *VolumeTypeAccessV3InitParameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3InitParameters.
func (in *VolumeTypeAccessV3InitParameters) DeepCopy() *VolumeTypeAccessV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3List) DeepCopyInto(out *VolumeTypeAccessV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VolumeTypeAccessV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3List.
func (in *VolumeTypeAccessV3List) DeepCopy() *VolumeTypeAccessV3List {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeTypeAccessV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3Observation) DeepCopyInto(out *VolumeTypeAccessV3Observation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3Observation.
func (in *VolumeTypeAccessV3Observation) DeepCopy() *VolumeTypeAccessV3Observation {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3Parameters) DeepCopyInto(out *VolumeTypeAccessV3Parameters) {
	*out = *in
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.VolumeTypeID != nil {
		in, out := &in.VolumeTypeID, &out.VolumeTypeID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3Parameters.
func (in *VolumeTypeAccessV3Parameters) DeepCopy() *VolumeTypeAccessV3Parameters {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3Spec) DeepCopyInto(out *VolumeTypeAccessV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3Spec.
func (in *VolumeTypeAccessV3Spec) DeepCopy() *VolumeTypeAccessV3Spec {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeAccessV3Status) DeepCopyInto(out *VolumeTypeAccessV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeAccessV3Status.
func (in *VolumeTypeAccessV3Status) DeepCopy() *VolumeTypeAccessV3Status {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeAccessV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3) DeepCopyInto(out *VolumeTypeV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3.
func (in *VolumeTypeV3) DeepCopy() *VolumeTypeV3 {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeTypeV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3InitParameters) DeepCopyInto(out *VolumeTypeV3InitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExtraSpecs != nil {
		in, out := &in.ExtraSpecs, &out.ExtraSpecs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsPublic != nil {
		in, out := &in.IsPublic, &out.IsPublic
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3InitParameters.
func (in *VolumeTypeV3InitParameters) DeepCopy() *VolumeTypeV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3List) DeepCopyInto(out *VolumeTypeV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VolumeTypeV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3List.
func (in *VolumeTypeV3List) DeepCopy() *VolumeTypeV3List {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeTypeV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3Observation) DeepCopyInto(out *VolumeTypeV3Observation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExtraSpecs != nil {
		in, out := &in.ExtraSpecs, &out.ExtraSpecs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsPublic != nil {
		in, out := &in.IsPublic, &out.IsPublic
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3Observation.
func (in *VolumeTypeV3Observation) DeepCopy() *VolumeTypeV3Observation {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3Parameters) DeepCopyInto(out *VolumeTypeV3Parameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExtraSpecs != nil {
		in, out := &in.ExtraSpecs, &out.ExtraSpecs
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.IsPublic != nil {
		in, out := &in.IsPublic, &out.IsPublic
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3Parameters.
func (in *VolumeTypeV3Parameters) DeepCopy() *VolumeTypeV3Parameters {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3Spec) DeepCopyInto(out *VolumeTypeV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3Spec.
func (in *VolumeTypeV3Spec) DeepCopy() *VolumeTypeV3Spec {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeTypeV3Status) DeepCopyInto(out *VolumeTypeV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeTypeV3Status.
func (in *VolumeTypeV3Status) DeepCopy() *VolumeTypeV3Status {
	if in == nil {
		return nil
	}
	out := new(VolumeTypeV3Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3) DeepCopyInto(out *VolumeV3) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3.
func (in *VolumeV3) DeepCopy() *VolumeV3 {
	if in == nil {
		return nil
	}
	out := new(VolumeV3)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeV3) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3InitParameters) DeepCopyInto(out *VolumeV3InitParameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ConsistencyGroupID != nil {
		in, out := &in.ConsistencyGroupID, &out.ConsistencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableOnlineResize != nil {
		in, out := &in.EnableOnlineResize, &out.EnableOnlineResize
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Multiattach != nil {
		in, out := &in.Multiattach, &out.Multiattach
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.SourceReplica != nil {
		in, out := &in.SourceReplica, &out.SourceReplica
		*out = new(string)
		**out = **in
	}
	if in.SourceVolID != nil {
		in, out := &in.SourceVolID, &out.SourceVolID
		*out = new(string)
		**out = **in
	}
	if in.VolumeType != nil {
		in, out := &in.VolumeType, &out.VolumeType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3InitParameters.
func (in *VolumeV3InitParameters) DeepCopy() *VolumeV3InitParameters {
	if in == nil {
		return nil
	}
	out := new(VolumeV3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3List) DeepCopyInto(out *VolumeV3List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VolumeV3, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3List.
func (in *VolumeV3List) DeepCopy() *VolumeV3List {
	if in == nil {
		return nil
	}
	out := new(VolumeV3List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VolumeV3List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3Observation) DeepCopyInto(out *VolumeV3Observation) {
	*out = *in
	if in.Attachment != nil {
		in, out := &in.Attachment, &out.Attachment
		*out = make([]AttachmentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ConsistencyGroupID != nil {
		in, out := &in.ConsistencyGroupID, &out.ConsistencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableOnlineResize != nil {
		in, out := &in.EnableOnlineResize, &out.EnableOnlineResize
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Multiattach != nil {
		in, out := &in.Multiattach, &out.Multiattach
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.SourceReplica != nil {
		in, out := &in.SourceReplica, &out.SourceReplica
		*out = new(string)
		**out = **in
	}
	if in.SourceVolID != nil {
		in, out := &in.SourceVolID, &out.SourceVolID
		*out = new(string)
		**out = **in
	}
	if in.VolumeType != nil {
		in, out := &in.VolumeType, &out.VolumeType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3Observation.
func (in *VolumeV3Observation) DeepCopy() *VolumeV3Observation {
	if in == nil {
		return nil
	}
	out := new(VolumeV3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3Parameters) DeepCopyInto(out *VolumeV3Parameters) {
	*out = *in
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ConsistencyGroupID != nil {
		in, out := &in.ConsistencyGroupID, &out.ConsistencyGroupID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableOnlineResize != nil {
		in, out := &in.EnableOnlineResize, &out.EnableOnlineResize
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.Metadata != nil {
		in, out := &in.Metadata, &out.Metadata
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Multiattach != nil {
		in, out := &in.Multiattach, &out.Multiattach
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SchedulerHints != nil {
		in, out := &in.SchedulerHints, &out.SchedulerHints
		*out = make([]SchedulerHintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
	if in.SourceReplica != nil {
		in, out := &in.SourceReplica, &out.SourceReplica
		*out = new(string)
		**out = **in
	}
	if in.SourceVolID != nil {
		in, out := &in.SourceVolID, &out.SourceVolID
		*out = new(string)
		**out = **in
	}
	if in.VolumeType != nil {
		in, out := &in.VolumeType, &out.VolumeType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3Parameters.
func (in *VolumeV3Parameters) DeepCopy() *VolumeV3Parameters {
	if in == nil {
		return nil
	}
	out := new(VolumeV3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3Spec) DeepCopyInto(out *VolumeV3Spec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3Spec.
func (in *VolumeV3Spec) DeepCopy() *VolumeV3Spec {
	if in == nil {
		return nil
	}
	out := new(VolumeV3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VolumeV3Status) DeepCopyInto(out *VolumeV3Status) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VolumeV3Status.
func (in *VolumeV3Status) DeepCopy() *VolumeV3Status {
	if in == nil {
		return nil
	}
	out := new(VolumeV3Status)
	in.DeepCopyInto(out)
	return out
}
