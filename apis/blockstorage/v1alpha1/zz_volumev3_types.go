// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentInitParameters struct {
}

type AttachmentObservation struct {
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type AttachmentParameters struct {
}

type SchedulerHintsInitParameters struct {

	// Arbitrary key/value pairs of additional
	// properties to pass to the scheduler.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The volume should be scheduled on a
	// different host from the set of volumes specified in the list provided.
	DifferentHost []*string `json:"differentHost,omitempty" tf:"different_host,omitempty"`

	// An instance UUID. The volume should be
	// scheduled on the same host as the instance.
	LocalToInstance *string `json:"localToInstance,omitempty" tf:"local_to_instance,omitempty"`

	// A conditional query that a back-end must pass in
	// order to host a volume. The query must use the JsonFilter syntax
	// which is described
	// here.
	// At this time, only simple queries are supported. Compound queries using
	// and, or, or not are not supported. An example of a simple query is:
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// A list of volume UUIDs. The volume should be
	// scheduled on the same host as another volume specified in the list provided.
	SameHost []*string `json:"sameHost,omitempty" tf:"same_host,omitempty"`
}

type SchedulerHintsObservation struct {

	// Arbitrary key/value pairs of additional
	// properties to pass to the scheduler.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The volume should be scheduled on a
	// different host from the set of volumes specified in the list provided.
	DifferentHost []*string `json:"differentHost,omitempty" tf:"different_host,omitempty"`

	// An instance UUID. The volume should be
	// scheduled on the same host as the instance.
	LocalToInstance *string `json:"localToInstance,omitempty" tf:"local_to_instance,omitempty"`

	// A conditional query that a back-end must pass in
	// order to host a volume. The query must use the JsonFilter syntax
	// which is described
	// here.
	// At this time, only simple queries are supported. Compound queries using
	// and, or, or not are not supported. An example of a simple query is:
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// A list of volume UUIDs. The volume should be
	// scheduled on the same host as another volume specified in the list provided.
	SameHost []*string `json:"sameHost,omitempty" tf:"same_host,omitempty"`
}

type SchedulerHintsParameters struct {

	// Arbitrary key/value pairs of additional
	// properties to pass to the scheduler.
	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// The volume should be scheduled on a
	// different host from the set of volumes specified in the list provided.
	// +kubebuilder:validation:Optional
	DifferentHost []*string `json:"differentHost,omitempty" tf:"different_host,omitempty"`

	// An instance UUID. The volume should be
	// scheduled on the same host as the instance.
	// +kubebuilder:validation:Optional
	LocalToInstance *string `json:"localToInstance,omitempty" tf:"local_to_instance,omitempty"`

	// A conditional query that a back-end must pass in
	// order to host a volume. The query must use the JsonFilter syntax
	// which is described
	// here.
	// At this time, only simple queries are supported. Compound queries using
	// and, or, or not are not supported. An example of a simple query is:
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// A list of volume UUIDs. The volume should be
	// scheduled on the same host as another volume specified in the list provided.
	// +kubebuilder:validation:Optional
	SameHost []*string `json:"sameHost,omitempty" tf:"same_host,omitempty"`
}

type VolumeV3InitParameters struct {

	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The consistency group to place the volume
	// in.
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When this option is set it allows extending
	// attached volumes. Note: updating size of an attached volume requires Cinder
	// support for version 3.42 and a compatible storage driver.
	EnableOnlineResize *bool `json:"enableOnlineResize,omitempty" tf:"enable_online_resize,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Allow the volume to be attached to more than one Compute instance.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new volume.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Provide the Cinder scheduler with hints on where
	// to instantiate a volume in the OpenStack cloud. The available hints are described below.
	SchedulerHints []SchedulerHintsInitParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// The size of the volume to create (in gigabytes).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// The type of volume to create.
	// Changing this creates a new volume.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeV3Observation struct {

	// If a volume is attached to an instance, this attribute will
	// display the Attachment ID, Instance ID, and the Device as the Instance
	// sees it.
	Attachment []AttachmentObservation `json:"attachment,omitempty" tf:"attachment,omitempty"`

	// The availability zone for the volume.
	// Changing this creates a new volume.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The consistency group to place the volume
	// in.
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When this option is set it allows extending
	// attached volumes. Note: updating size of an attached volume requires Cinder
	// support for version 3.42 and a compatible storage driver.
	EnableOnlineResize *bool `json:"enableOnlineResize,omitempty" tf:"enable_online_resize,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Allow the volume to be attached to more than one Compute instance.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new volume.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Provide the Cinder scheduler with hints on where
	// to instantiate a volume in the OpenStack cloud. The available hints are described below.
	SchedulerHints []SchedulerHintsObservation `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// The size of the volume to create (in gigabytes).
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// The type of volume to create.
	// Changing this creates a new volume.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type VolumeV3Parameters struct {

	// The availability zone for the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The consistency group to place the volume
	// in.
	// +kubebuilder:validation:Optional
	ConsistencyGroupID *string `json:"consistencyGroupId,omitempty" tf:"consistency_group_id,omitempty"`

	// A description of the volume. Changing this updates
	// the volume's description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When this option is set it allows extending
	// attached volumes. Note: updating size of an attached volume requires Cinder
	// support for version 3.42 and a compatible storage driver.
	// +kubebuilder:validation:Optional
	EnableOnlineResize *bool `json:"enableOnlineResize,omitempty" tf:"enable_online_resize,omitempty"`

	// The image ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// Metadata key/value pairs to associate with the volume.
	// Changing this updates the existing volume metadata.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Allow the volume to be attached to more than one Compute instance.
	// +kubebuilder:validation:Optional
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// A unique name for the volume. Changing this updates the
	// volume's name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new volume.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Provide the Cinder scheduler with hints on where
	// to instantiate a volume in the OpenStack cloud. The available hints are described below.
	// +kubebuilder:validation:Optional
	SchedulerHints []SchedulerHintsParameters `json:"schedulerHints,omitempty" tf:"scheduler_hints,omitempty"`

	// The size of the volume to create (in gigabytes).
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The snapshot ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The volume ID to replicate with.
	// +kubebuilder:validation:Optional
	SourceReplica *string `json:"sourceReplica,omitempty" tf:"source_replica,omitempty"`

	// The volume ID from which to create the volume.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// The type of volume to create.
	// Changing this creates a new volume.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

// VolumeV3Spec defines the desired state of VolumeV3
type VolumeV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeV3Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeV3InitParameters `json:"initProvider,omitempty"`
}

// VolumeV3Status defines the observed state of VolumeV3.
type VolumeV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeV3 is the Schema for the VolumeV3s API. Manages a V3 volume resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type VolumeV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   VolumeV3Spec   `json:"spec"`
	Status VolumeV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeV3List contains a list of VolumeV3s
type VolumeV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeV3 `json:"items"`
}

// Repository type metadata.
var (
	VolumeV3_Kind             = "VolumeV3"
	VolumeV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeV3_Kind}.String()
	VolumeV3_KindAPIVersion   = VolumeV3_Kind + "." + CRDGroupVersion.String()
	VolumeV3_GroupVersionKind = CRDGroupVersion.WithKind(VolumeV3_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeV3{}, &VolumeV3List{})
}
