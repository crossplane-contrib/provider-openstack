/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RecordsetV2.
func (mg *RecordsetV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ZoneID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ZoneIDRef,
		Selector:     mg.Spec.ForProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneV2List{},
			Managed: &ZoneV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ZoneID")
	}
	mg.Spec.ForProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ZoneID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ZoneIDRef,
		Selector:     mg.Spec.InitProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneV2List{},
			Managed: &ZoneV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ZoneID")
	}
	mg.Spec.InitProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransferAcceptV2.
func (mg *TransferAcceptV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Key),
		Extract:      resource.ExtractParamPath("key", false),
		Reference:    mg.Spec.ForProvider.KeyRef,
		Selector:     mg.Spec.ForProvider.KeySelector,
		To: reference.To{
			List:    &TransferRequestV2List{},
			Managed: &TransferRequestV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Key")
	}
	mg.Spec.ForProvider.Key = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ZoneTransferRequestID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ZoneTransferRequestIDRef,
		Selector:     mg.Spec.ForProvider.ZoneTransferRequestIDSelector,
		To: reference.To{
			List:    &TransferRequestV2List{},
			Managed: &TransferRequestV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ZoneTransferRequestID")
	}
	mg.Spec.ForProvider.ZoneTransferRequestID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneTransferRequestIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Key),
		Extract:      resource.ExtractParamPath("key", false),
		Reference:    mg.Spec.InitProvider.KeyRef,
		Selector:     mg.Spec.InitProvider.KeySelector,
		To: reference.To{
			List:    &TransferRequestV2List{},
			Managed: &TransferRequestV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Key")
	}
	mg.Spec.InitProvider.Key = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.KeyRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ZoneTransferRequestID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ZoneTransferRequestIDRef,
		Selector:     mg.Spec.InitProvider.ZoneTransferRequestIDSelector,
		To: reference.To{
			List:    &TransferRequestV2List{},
			Managed: &TransferRequestV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ZoneTransferRequestID")
	}
	mg.Spec.InitProvider.ZoneTransferRequestID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneTransferRequestIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TransferRequestV2.
func (mg *TransferRequestV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ZoneID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ZoneIDRef,
		Selector:     mg.Spec.ForProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneV2List{},
			Managed: &ZoneV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ZoneID")
	}
	mg.Spec.ForProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ZoneIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ZoneID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ZoneIDRef,
		Selector:     mg.Spec.InitProvider.ZoneIDSelector,
		To: reference.To{
			List:    &ZoneV2List{},
			Managed: &ZoneV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ZoneID")
	}
	mg.Spec.InitProvider.ZoneID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ZoneIDRef = rsp.ResolvedReference

	return nil
}
