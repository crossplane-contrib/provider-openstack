// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransferRequestV2InitParameters struct {

	// A description of the zone tranfer request.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Disable wait for zone to reach ACTIVE
	// status. The check is enabled by default. If this argument is true, zone
	// will be considered as created/updated if OpenStack request returned success.
	DisableStatusCheck *bool `json:"disableStatusCheck,omitempty" tf:"disable_status_check,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// Keypairs are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new DNS zone.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The target Project ID to transfer to.
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`

	// Map of additional options. Changing this creates a
	// new transfer request.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone for which to create the transfer
	// request.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TransferRequestV2Observation struct {

	// A description of the zone tranfer request.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Disable wait for zone to reach ACTIVE
	// status. The check is enabled by default. If this argument is true, zone
	// will be considered as created/updated if OpenStack request returned success.
	DisableStatusCheck *bool `json:"disableStatusCheck,omitempty" tf:"disable_status_check,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// Keypairs are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new DNS zone.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The target Project ID to transfer to.
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`

	// Map of additional options. Changing this creates a
	// new transfer request.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone for which to create the transfer
	// request.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type TransferRequestV2Parameters struct {

	// A description of the zone tranfer request.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Disable wait for zone to reach ACTIVE
	// status. The check is enabled by default. If this argument is true, zone
	// will be considered as created/updated if OpenStack request returned success.
	// +kubebuilder:validation:Optional
	DisableStatusCheck *bool `json:"disableStatusCheck,omitempty" tf:"disable_status_check,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// Keypairs are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new DNS zone.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The target Project ID to transfer to.
	// +kubebuilder:validation:Optional
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`

	// Map of additional options. Changing this creates a
	// new transfer request.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// The ID of the zone for which to create the transfer
	// request.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// TransferRequestV2Spec defines the desired state of TransferRequestV2
type TransferRequestV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferRequestV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TransferRequestV2InitParameters `json:"initProvider,omitempty"`
}

// TransferRequestV2Status defines the observed state of TransferRequestV2.
type TransferRequestV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferRequestV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferRequestV2 is the Schema for the TransferRequestV2s API. Manages a DNS zone Transfer request in the OpenStack DNS Service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type TransferRequestV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   TransferRequestV2Spec   `json:"spec"`
	Status TransferRequestV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferRequestV2List contains a list of TransferRequestV2s
type TransferRequestV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferRequestV2 `json:"items"`
}

// Repository type metadata.
var (
	TransferRequestV2_Kind             = "TransferRequestV2"
	TransferRequestV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransferRequestV2_Kind}.String()
	TransferRequestV2_KindAPIVersion   = TransferRequestV2_Kind + "." + CRDGroupVersion.String()
	TransferRequestV2_GroupVersionKind = CRDGroupVersion.WithKind(TransferRequestV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TransferRequestV2{}, &TransferRequestV2List{})
}
