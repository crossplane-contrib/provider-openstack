// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingipAssociateV2InitParameters struct {
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// IP Address of an existing floating IP.
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// ID of an existing port with at least one IP address to
	// associate with this floating IP.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a floating IP that can be used with
	// another networking resource, such as a load balancer. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// floating IP (which may or may not have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type FloatingipAssociateV2Observation struct {
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// IP Address of an existing floating IP.
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of an existing port with at least one IP address to
	// associate with this floating IP.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a floating IP that can be used with
	// another networking resource, such as a load balancer. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// floating IP (which may or may not have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type FloatingipAssociateV2Parameters struct {

	// +kubebuilder:validation:Optional
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// IP Address of an existing floating IP.
	// +kubebuilder:validation:Optional
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// ID of an existing port with at least one IP address to
	// associate with this floating IP.
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a floating IP that can be used with
	// another networking resource, such as a load balancer. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// floating IP (which may or may not have a different address).
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// FloatingipAssociateV2Spec defines the desired state of FloatingipAssociateV2
type FloatingipAssociateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingipAssociateV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FloatingipAssociateV2InitParameters `json:"initProvider,omitempty"`
}

// FloatingipAssociateV2Status defines the observed state of FloatingipAssociateV2.
type FloatingipAssociateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingipAssociateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipAssociateV2 is the Schema for the FloatingipAssociateV2s API. Associates a Floating IP to a Port
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type FloatingipAssociateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.floatingIp) || (has(self.initProvider) && has(self.initProvider.floatingIp))",message="spec.forProvider.floatingIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portId) || (has(self.initProvider) && has(self.initProvider.portId))",message="spec.forProvider.portId is a required parameter"
	Spec   FloatingipAssociateV2Spec   `json:"spec"`
	Status FloatingipAssociateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipAssociateV2List contains a list of FloatingipAssociateV2s
type FloatingipAssociateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingipAssociateV2 `json:"items"`
}

// Repository type metadata.
var (
	FloatingipAssociateV2_Kind             = "FloatingipAssociateV2"
	FloatingipAssociateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingipAssociateV2_Kind}.String()
	FloatingipAssociateV2_KindAPIVersion   = FloatingipAssociateV2_Kind + "." + CRDGroupVersion.String()
	FloatingipAssociateV2_GroupVersionKind = CRDGroupVersion.WithKind(FloatingipAssociateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingipAssociateV2{}, &FloatingipAssociateV2List{})
}
