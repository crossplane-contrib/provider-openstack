// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressscopeV2InitParameters struct {

	// IP version, either 4 (default) or 6. Changing this
	// creates a new address-scope.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the address-scope. Changing this updates the
	// name of the existing address-scope.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The owner of the address-scope. Required if admin
	// wants to create a address-scope for another project. Changing this creates a
	// new address-scope.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron address-scope. If omitted,
	// the region argument of the provider is used. Changing this creates a new
	// address-scope.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether this address-scope is shared across
	// all projects. Changing this updates the shared status of the existing
	// address-scope.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`
}

type AddressscopeV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version, either 4 (default) or 6. Changing this
	// creates a new address-scope.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the address-scope. Changing this updates the
	// name of the existing address-scope.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The owner of the address-scope. Required if admin
	// wants to create a address-scope for another project. Changing this creates a
	// new address-scope.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron address-scope. If omitted,
	// the region argument of the provider is used. Changing this creates a new
	// address-scope.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether this address-scope is shared across
	// all projects. Changing this updates the shared status of the existing
	// address-scope.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`
}

type AddressscopeV2Parameters struct {

	// IP version, either 4 (default) or 6. Changing this
	// creates a new address-scope.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// The name of the address-scope. Changing this updates the
	// name of the existing address-scope.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The owner of the address-scope. Required if admin
	// wants to create a address-scope for another project. Changing this creates a
	// new address-scope.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron address-scope. If omitted,
	// the region argument of the provider is used. Changing this creates a new
	// address-scope.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether this address-scope is shared across
	// all projects. Changing this updates the shared status of the existing
	// address-scope.
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`
}

// AddressscopeV2Spec defines the desired state of AddressscopeV2
type AddressscopeV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AddressscopeV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AddressscopeV2InitParameters `json:"initProvider,omitempty"`
}

// AddressscopeV2Status defines the observed state of AddressscopeV2.
type AddressscopeV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AddressscopeV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AddressscopeV2 is the Schema for the AddressscopeV2s API. Manages a V2 Neutron addressscope resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type AddressscopeV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AddressscopeV2Spec   `json:"spec"`
	Status AddressscopeV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddressscopeV2List contains a list of AddressscopeV2s
type AddressscopeV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AddressscopeV2 `json:"items"`
}

// Repository type metadata.
var (
	AddressscopeV2_Kind             = "AddressscopeV2"
	AddressscopeV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AddressscopeV2_Kind}.String()
	AddressscopeV2_KindAPIVersion   = AddressscopeV2_Kind + "." + CRDGroupVersion.String()
	AddressscopeV2_GroupVersionKind = CRDGroupVersion.WithKind(AddressscopeV2_Kind)
)

func init() {
	SchemeBuilder.Register(&AddressscopeV2{}, &AddressscopeV2List{})
}
