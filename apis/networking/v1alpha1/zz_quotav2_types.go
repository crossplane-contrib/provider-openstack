// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotaV2InitParameters struct {

	// Quota value for floating IPs. Changing this updates the
	// existing quota.
	Floatingip *float64 `json:"floatingip,omitempty" tf:"floatingip,omitempty"`

	// Quota value for networks. Changing this updates the
	// existing quota.
	Network *float64 `json:"network,omitempty" tf:"network,omitempty"`

	// Quota value for ports. Changing this updates the
	// existing quota.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Quota value for RBAC policies.
	// Changing this updates the existing quota.
	RbacPolicy *float64 `json:"rbacPolicy,omitempty" tf:"rbac_policy,omitempty"`

	// The region in which to create the quota. If
	// omitted, the region argument of the provider is used. Changing this
	// creates new quota.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for routers. Changing this updates the
	// existing quota.
	Router *float64 `json:"router,omitempty" tf:"router,omitempty"`

	// Quota value for security groups. Changing
	// this updates the existing quota.
	SecurityGroup *float64 `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quota.
	SecurityGroupRule *float64 `json:"securityGroupRule,omitempty" tf:"security_group_rule,omitempty"`

	// Quota value for subnets. Changing
	// this updates the existing quota.
	Subnet *float64 `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Quota value for subnetpools.
	// Changing this updates the existing quota.
	Subnetpool *float64 `json:"subnetpool,omitempty" tf:"subnetpool,omitempty"`
}

type QuotaV2Observation struct {

	// Quota value for floating IPs. Changing this updates the
	// existing quota.
	Floatingip *float64 `json:"floatingip,omitempty" tf:"floatingip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Quota value for networks. Changing this updates the
	// existing quota.
	Network *float64 `json:"network,omitempty" tf:"network,omitempty"`

	// Quota value for ports. Changing this updates the
	// existing quota.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Quota value for RBAC policies.
	// Changing this updates the existing quota.
	RbacPolicy *float64 `json:"rbacPolicy,omitempty" tf:"rbac_policy,omitempty"`

	// The region in which to create the quota. If
	// omitted, the region argument of the provider is used. Changing this
	// creates new quota.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for routers. Changing this updates the
	// existing quota.
	Router *float64 `json:"router,omitempty" tf:"router,omitempty"`

	// Quota value for security groups. Changing
	// this updates the existing quota.
	SecurityGroup *float64 `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quota.
	SecurityGroupRule *float64 `json:"securityGroupRule,omitempty" tf:"security_group_rule,omitempty"`

	// Quota value for subnets. Changing
	// this updates the existing quota.
	Subnet *float64 `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Quota value for subnetpools.
	// Changing this updates the existing quota.
	Subnetpool *float64 `json:"subnetpool,omitempty" tf:"subnetpool,omitempty"`
}

type QuotaV2Parameters struct {

	// Quota value for floating IPs. Changing this updates the
	// existing quota.
	// +kubebuilder:validation:Optional
	Floatingip *float64 `json:"floatingip,omitempty" tf:"floatingip,omitempty"`

	// Quota value for networks. Changing this updates the
	// existing quota.
	// +kubebuilder:validation:Optional
	Network *float64 `json:"network,omitempty" tf:"network,omitempty"`

	// Quota value for ports. Changing this updates the
	// existing quota.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// ID of the project to manage quota. Changing this
	// creates new quota.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/identity/v1alpha1.ProjectV3
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Quota value for RBAC policies.
	// Changing this updates the existing quota.
	// +kubebuilder:validation:Optional
	RbacPolicy *float64 `json:"rbacPolicy,omitempty" tf:"rbac_policy,omitempty"`

	// The region in which to create the quota. If
	// omitted, the region argument of the provider is used. Changing this
	// creates new quota.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for routers. Changing this updates the
	// existing quota.
	// +kubebuilder:validation:Optional
	Router *float64 `json:"router,omitempty" tf:"router,omitempty"`

	// Quota value for security groups. Changing
	// this updates the existing quota.
	// +kubebuilder:validation:Optional
	SecurityGroup *float64 `json:"securityGroup,omitempty" tf:"security_group,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quota.
	// +kubebuilder:validation:Optional
	SecurityGroupRule *float64 `json:"securityGroupRule,omitempty" tf:"security_group_rule,omitempty"`

	// Quota value for subnets. Changing
	// this updates the existing quota.
	// +kubebuilder:validation:Optional
	Subnet *float64 `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Quota value for subnetpools.
	// Changing this updates the existing quota.
	// +kubebuilder:validation:Optional
	Subnetpool *float64 `json:"subnetpool,omitempty" tf:"subnetpool,omitempty"`
}

// QuotaV2Spec defines the desired state of QuotaV2
type QuotaV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QuotaV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QuotaV2InitParameters `json:"initProvider,omitempty"`
}

// QuotaV2Status defines the observed state of QuotaV2.
type QuotaV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QuotaV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaV2 is the Schema for the QuotaV2s API. Manages a V2 networking quota resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type QuotaV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotaV2Spec   `json:"spec"`
	Status            QuotaV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuotaV2List contains a list of QuotaV2s
type QuotaV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuotaV2 `json:"items"`
}

// Repository type metadata.
var (
	QuotaV2_Kind             = "QuotaV2"
	QuotaV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QuotaV2_Kind}.String()
	QuotaV2_KindAPIVersion   = QuotaV2_Kind + "." + CRDGroupVersion.String()
	QuotaV2_GroupVersionKind = CRDGroupVersion.WithKind(QuotaV2_Kind)
)

func init() {
	SchemeBuilder.Register(&QuotaV2{}, &QuotaV2List{})
}
