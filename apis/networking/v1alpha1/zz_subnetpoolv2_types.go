// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubnetpoolV2InitParameters struct {

	// The Neutron address scope to assign to the
	// subnetpool. Changing this updates the address scope id of the existing
	// subnetpool.
	AddressScopeID *string `json:"addressScopeId,omitempty" tf:"address_scope_id,omitempty"`

	// The size of the prefix to allocate when the cidr
	// or prefixlen attributes are omitted when you create the subnet. Defaults to the
	// MinPrefixLen. Changing this updates the default prefixlen of the existing
	// subnetpool.
	DefaultPrefixlen *float64 `json:"defaultPrefixlen,omitempty" tf:"default_prefixlen,omitempty"`

	// The per-project quota on the prefix space that can be
	// allocated from the subnetpool for project subnets. Changing this updates the
	// default quota of the existing subnetpool.
	DefaultQuota *float64 `json:"defaultQuota,omitempty" tf:"default_quota,omitempty"`

	// The human-readable description for the subnetpool.
	// Changing this updates the description of the existing subnetpool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The IP protocol version.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Indicates whether the subnetpool is default
	// subnetpool or not. Changing this updates the default status of the existing
	// subnetpool.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// The maximum prefix size that can be allocated from
	// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
	// default is 128. Changing this updates the max prefixlen of the existing
	// subnetpool.
	MaxPrefixlen *float64 `json:"maxPrefixlen,omitempty" tf:"max_prefixlen,omitempty"`

	// The smallest prefix that can be allocated from a
	// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
	// is 64. Changing this updates the min prefixlen of the existing subnetpool.
	MinPrefixlen *float64 `json:"minPrefixlen,omitempty" tf:"min_prefixlen,omitempty"`

	// The name of the subnetpool. Changing this updates the name of
	// the existing subnetpool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of subnet prefixes to assign to the subnetpool.
	// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
	// subnet prefix must be unique among all subnet prefixes in all subnetpools that
	// are associated with the address scope. Changing this updates the prefixes list
	// of the existing subnetpool.
	Prefixes []*string `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// The owner of the subnetpool. Required if admin wants to
	// create a subnetpool for another project. Changing this creates a new subnetpool.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnetpool. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// subnetpool.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether this subnetpool is shared across
	// all projects. Changing this updates the shared status of the existing
	// subnetpool.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// A set of string tags for the subnetpool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type SubnetpoolV2Observation struct {

	// The Neutron address scope to assign to the
	// subnetpool. Changing this updates the address scope id of the existing
	// subnetpool.
	AddressScopeID *string `json:"addressScopeId,omitempty" tf:"address_scope_id,omitempty"`

	// The collection of tags assigned on the subnetpool, which have been
	// explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// The time at which subnetpool was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The size of the prefix to allocate when the cidr
	// or prefixlen attributes are omitted when you create the subnet. Defaults to the
	// MinPrefixLen. Changing this updates the default prefixlen of the existing
	// subnetpool.
	DefaultPrefixlen *float64 `json:"defaultPrefixlen,omitempty" tf:"default_prefixlen,omitempty"`

	// The per-project quota on the prefix space that can be
	// allocated from the subnetpool for project subnets. Changing this updates the
	// default quota of the existing subnetpool.
	DefaultQuota *float64 `json:"defaultQuota,omitempty" tf:"default_quota,omitempty"`

	// The human-readable description for the subnetpool.
	// Changing this updates the description of the existing subnetpool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IP protocol version.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Indicates whether the subnetpool is default
	// subnetpool or not. Changing this updates the default status of the existing
	// subnetpool.
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// The maximum prefix size that can be allocated from
	// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
	// default is 128. Changing this updates the max prefixlen of the existing
	// subnetpool.
	MaxPrefixlen *float64 `json:"maxPrefixlen,omitempty" tf:"max_prefixlen,omitempty"`

	// The smallest prefix that can be allocated from a
	// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
	// is 64. Changing this updates the min prefixlen of the existing subnetpool.
	MinPrefixlen *float64 `json:"minPrefixlen,omitempty" tf:"min_prefixlen,omitempty"`

	// The name of the subnetpool. Changing this updates the name of
	// the existing subnetpool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of subnet prefixes to assign to the subnetpool.
	// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
	// subnet prefix must be unique among all subnet prefixes in all subnetpools that
	// are associated with the address scope. Changing this updates the prefixes list
	// of the existing subnetpool.
	Prefixes []*string `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// The owner of the subnetpool. Required if admin wants to
	// create a subnetpool for another project. Changing this creates a new subnetpool.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnetpool. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// subnetpool.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The revision number of the subnetpool.
	RevisionNumber *float64 `json:"revisionNumber,omitempty" tf:"revision_number,omitempty"`

	// Indicates whether this subnetpool is shared across
	// all projects. Changing this updates the shared status of the existing
	// subnetpool.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// A set of string tags for the subnetpool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The time at which subnetpool was created.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type SubnetpoolV2Parameters struct {

	// The Neutron address scope to assign to the
	// subnetpool. Changing this updates the address scope id of the existing
	// subnetpool.
	// +kubebuilder:validation:Optional
	AddressScopeID *string `json:"addressScopeId,omitempty" tf:"address_scope_id,omitempty"`

	// The size of the prefix to allocate when the cidr
	// or prefixlen attributes are omitted when you create the subnet. Defaults to the
	// MinPrefixLen. Changing this updates the default prefixlen of the existing
	// subnetpool.
	// +kubebuilder:validation:Optional
	DefaultPrefixlen *float64 `json:"defaultPrefixlen,omitempty" tf:"default_prefixlen,omitempty"`

	// The per-project quota on the prefix space that can be
	// allocated from the subnetpool for project subnets. Changing this updates the
	// default quota of the existing subnetpool.
	// +kubebuilder:validation:Optional
	DefaultQuota *float64 `json:"defaultQuota,omitempty" tf:"default_quota,omitempty"`

	// The human-readable description for the subnetpool.
	// Changing this updates the description of the existing subnetpool.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The IP protocol version.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Indicates whether the subnetpool is default
	// subnetpool or not. Changing this updates the default status of the existing
	// subnetpool.
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// The maximum prefix size that can be allocated from
	// the subnetpool. For IPv4 subnetpools, default is 32. For IPv6 subnetpools,
	// default is 128. Changing this updates the max prefixlen of the existing
	// subnetpool.
	// +kubebuilder:validation:Optional
	MaxPrefixlen *float64 `json:"maxPrefixlen,omitempty" tf:"max_prefixlen,omitempty"`

	// The smallest prefix that can be allocated from a
	// subnetpool. For IPv4 subnetpools, default is 8. For IPv6 subnetpools, default
	// is 64. Changing this updates the min prefixlen of the existing subnetpool.
	// +kubebuilder:validation:Optional
	MinPrefixlen *float64 `json:"minPrefixlen,omitempty" tf:"min_prefixlen,omitempty"`

	// The name of the subnetpool. Changing this updates the name of
	// the existing subnetpool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of subnet prefixes to assign to the subnetpool.
	// Neutron API merges adjacent prefixes and treats them as a single prefix. Each
	// subnet prefix must be unique among all subnet prefixes in all subnetpools that
	// are associated with the address scope. Changing this updates the prefixes list
	// of the existing subnetpool.
	// +kubebuilder:validation:Optional
	Prefixes []*string `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// The owner of the subnetpool. Required if admin wants to
	// create a subnetpool for another project. Changing this creates a new subnetpool.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnetpool. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// subnetpool.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Indicates whether this subnetpool is shared across
	// all projects. Changing this updates the shared status of the existing
	// subnetpool.
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// A set of string tags for the subnetpool.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// SubnetpoolV2Spec defines the desired state of SubnetpoolV2
type SubnetpoolV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetpoolV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubnetpoolV2InitParameters `json:"initProvider,omitempty"`
}

// SubnetpoolV2Status defines the observed state of SubnetpoolV2.
type SubnetpoolV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetpoolV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetpoolV2 is the Schema for the SubnetpoolV2s API. Manages a V2 Neutron subnetpool resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type SubnetpoolV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.prefixes) || (has(self.initProvider) && has(self.initProvider.prefixes))",message="spec.forProvider.prefixes is a required parameter"
	Spec   SubnetpoolV2Spec   `json:"spec"`
	Status SubnetpoolV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetpoolV2List contains a list of SubnetpoolV2s
type SubnetpoolV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubnetpoolV2 `json:"items"`
}

// Repository type metadata.
var (
	SubnetpoolV2_Kind             = "SubnetpoolV2"
	SubnetpoolV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubnetpoolV2_Kind}.String()
	SubnetpoolV2_KindAPIVersion   = SubnetpoolV2_Kind + "." + CRDGroupVersion.String()
	SubnetpoolV2_GroupVersionKind = CRDGroupVersion.WithKind(SubnetpoolV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SubnetpoolV2{}, &SubnetpoolV2List{})
}
