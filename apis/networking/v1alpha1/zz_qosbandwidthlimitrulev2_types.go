// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QosBandwidthLimitRuleV2InitParameters struct {

	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS bandwidth limit rule.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
	// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
	MaxBurstKbps *float64 `json:"maxBurstKbps,omitempty" tf:"max_burst_kbps,omitempty"`

	// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
	// maximum kilobits per second of the existing QoS bandwidth limit rule.
	MaxKbps *float64 `json:"maxKbps,omitempty" tf:"max_kbps,omitempty"`

	// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
	QosPolicyID *string `json:"qosPolicyId,omitempty" tf:"qos_policy_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type QosBandwidthLimitRuleV2Observation struct {

	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS bandwidth limit rule.
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
	// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
	MaxBurstKbps *float64 `json:"maxBurstKbps,omitempty" tf:"max_burst_kbps,omitempty"`

	// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
	// maximum kilobits per second of the existing QoS bandwidth limit rule.
	MaxKbps *float64 `json:"maxKbps,omitempty" tf:"max_kbps,omitempty"`

	// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
	QosPolicyID *string `json:"qosPolicyId,omitempty" tf:"qos_policy_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type QosBandwidthLimitRuleV2Parameters struct {

	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS bandwidth limit rule.
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
	// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
	// +kubebuilder:validation:Optional
	MaxBurstKbps *float64 `json:"maxBurstKbps,omitempty" tf:"max_burst_kbps,omitempty"`

	// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
	// maximum kilobits per second of the existing QoS bandwidth limit rule.
	// +kubebuilder:validation:Optional
	MaxKbps *float64 `json:"maxKbps,omitempty" tf:"max_kbps,omitempty"`

	// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
	// +kubebuilder:validation:Optional
	QosPolicyID *string `json:"qosPolicyId,omitempty" tf:"qos_policy_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// QosBandwidthLimitRuleV2Spec defines the desired state of QosBandwidthLimitRuleV2
type QosBandwidthLimitRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QosBandwidthLimitRuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QosBandwidthLimitRuleV2InitParameters `json:"initProvider,omitempty"`
}

// QosBandwidthLimitRuleV2Status defines the observed state of QosBandwidthLimitRuleV2.
type QosBandwidthLimitRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QosBandwidthLimitRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QosBandwidthLimitRuleV2 is the Schema for the QosBandwidthLimitRuleV2s API. Manages a V2 Neutron QoS bandwidth limit rule resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type QosBandwidthLimitRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxKbps) || (has(self.initProvider) && has(self.initProvider.maxKbps))",message="spec.forProvider.maxKbps is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.qosPolicyId) || (has(self.initProvider) && has(self.initProvider.qosPolicyId))",message="spec.forProvider.qosPolicyId is a required parameter"
	Spec   QosBandwidthLimitRuleV2Spec   `json:"spec"`
	Status QosBandwidthLimitRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QosBandwidthLimitRuleV2List contains a list of QosBandwidthLimitRuleV2s
type QosBandwidthLimitRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QosBandwidthLimitRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	QosBandwidthLimitRuleV2_Kind             = "QosBandwidthLimitRuleV2"
	QosBandwidthLimitRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QosBandwidthLimitRuleV2_Kind}.String()
	QosBandwidthLimitRuleV2_KindAPIVersion   = QosBandwidthLimitRuleV2_Kind + "." + CRDGroupVersion.String()
	QosBandwidthLimitRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(QosBandwidthLimitRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&QosBandwidthLimitRuleV2{}, &QosBandwidthLimitRuleV2List{})
}
