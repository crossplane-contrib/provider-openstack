// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageAccessAcceptV2InitParameters struct {

	// The proposed image ID.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The member ID, e.g. the target project ID. Optional
	// for admin accounts. Defaults to the current scope project ID.
	MemberID *string `json:"memberId,omitempty" tf:"member_id,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to manage Image memberships. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// membership.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The membership proposal status. Can either be
	// accepted, rejected or pending.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ImageAccessAcceptV2Observation struct {

	// The date the image membership was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The proposed image ID.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The member ID, e.g. the target project ID. Optional
	// for admin accounts. Defaults to the current scope project ID.
	MemberID *string `json:"memberId,omitempty" tf:"member_id,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to manage Image memberships. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// membership.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The membership schema.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The membership proposal status. Can either be
	// accepted, rejected or pending.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date the image membership was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ImageAccessAcceptV2Parameters struct {

	// The proposed image ID.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The member ID, e.g. the target project ID. Optional
	// for admin accounts. Defaults to the current scope project ID.
	// +kubebuilder:validation:Optional
	MemberID *string `json:"memberId,omitempty" tf:"member_id,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to manage Image memberships. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// membership.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The membership proposal status. Can either be
	// accepted, rejected or pending.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// ImageAccessAcceptV2Spec defines the desired state of ImageAccessAcceptV2
type ImageAccessAcceptV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageAccessAcceptV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageAccessAcceptV2InitParameters `json:"initProvider,omitempty"`
}

// ImageAccessAcceptV2Status defines the observed state of ImageAccessAcceptV2.
type ImageAccessAcceptV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageAccessAcceptV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageAccessAcceptV2 is the Schema for the ImageAccessAcceptV2s API. Manages a V2 Image membership proposal resource within OpenStack Glance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ImageAccessAcceptV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.imageId) || (has(self.initProvider) && has(self.initProvider.imageId))",message="spec.forProvider.imageId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   ImageAccessAcceptV2Spec   `json:"spec"`
	Status ImageAccessAcceptV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageAccessAcceptV2List contains a list of ImageAccessAcceptV2s
type ImageAccessAcceptV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageAccessAcceptV2 `json:"items"`
}

// Repository type metadata.
var (
	ImageAccessAcceptV2_Kind             = "ImageAccessAcceptV2"
	ImageAccessAcceptV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageAccessAcceptV2_Kind}.String()
	ImageAccessAcceptV2_KindAPIVersion   = ImageAccessAcceptV2_Kind + "." + CRDGroupVersion.String()
	ImageAccessAcceptV2_GroupVersionKind = CRDGroupVersion.WithKind(ImageAccessAcceptV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageAccessAcceptV2{}, &ImageAccessAcceptV2List{})
}
