// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageV2InitParameters struct {

	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat *string `json:"containerFormat,omitempty" tf:"container_format,omitempty"`

	// If true, this provider will decompress downloaded
	// image before uploading it to OpenStack. Decompression algorithm is chosen by
	// checking "Content-Type" header, supported algorithm are: gzip, bzip2 and xz.
	// Defaults to false. Changing this creates a new Image.
	Decompress *bool `json:"decompress,omitempty" tf:"decompress,omitempty"`

	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat *string `json:"diskFormat,omitempty" tf:"disk_format,omitempty"`

	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden *bool `json:"hidden,omitempty" tf:"hidden,omitempty"`

	// This is the directory where the images will
	// be downloaded. Images will be stored with a filename corresponding to
	// the url's md5 hash. Defaults to "$HOME/
	ImageCachePath *string `json:"imageCachePath,omitempty" tf:"image_cache_path,omitempty"`

	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// This is the url of the raw image. If web_download
	// is not used, then the image will be downloaded in the image_cache_path before
	// being uploaded to Glance.
	// Conflicts with local_file_path.
	ImageSourceURL *string `json:"imageSourceUrl,omitempty" tf:"image_source_url,omitempty"`

	// The username of basic auth to download image_source_url.
	ImageSourceUsername *string `json:"imageSourceUsername,omitempty" tf:"image_source_username,omitempty"`

	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with image_source_url and
	// web_download.
	LocalFilePath *string `json:"localFilePath,omitempty" tf:"local_file_path,omitempty"`

	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb *float64 `json:"minDiskGb,omitempty" tf:"min_disk_gb,omitempty"`

	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRAMMb *float64 `json:"minRamMb,omitempty" tf:"min_ram_mb,omitempty"`

	// The name of the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// If true, image will not be deletable.
	// Defaults to false.
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new Image.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with web_download.
	// Defaults to true when not using web_download.
	VerifyChecksum *bool `json:"verifyChecksum,omitempty" tf:"verify_checksum,omitempty"`

	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`

	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with local_file_path. Defaults to false.
	WebDownload *bool `json:"webDownload,omitempty" tf:"web_download,omitempty"`
}

type ImageV2Observation struct {

	// The checksum of the data associated with the image.
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	ContainerFormat *string `json:"containerFormat,omitempty" tf:"container_format,omitempty"`

	// The date the image was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// If true, this provider will decompress downloaded
	// image before uploading it to OpenStack. Decompression algorithm is chosen by
	// checking "Content-Type" header, supported algorithm are: gzip, bzip2 and xz.
	// Defaults to false. Changing this creates a new Image.
	Decompress *bool `json:"decompress,omitempty" tf:"decompress,omitempty"`

	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	DiskFormat *string `json:"diskFormat,omitempty" tf:"disk_format,omitempty"`

	// the trailing path after the glance
	// endpoint that represent the location of the image
	// or the path to retrieve it.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// If true, image will be hidden from public list.
	// Defaults to false.
	Hidden *bool `json:"hidden,omitempty" tf:"hidden,omitempty"`

	// A unique ID assigned by Glance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This is the directory where the images will
	// be downloaded. Images will be stored with a filename corresponding to
	// the url's md5 hash. Defaults to "$HOME/
	ImageCachePath *string `json:"imageCachePath,omitempty" tf:"image_cache_path,omitempty"`

	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// This is the url of the raw image. If web_download
	// is not used, then the image will be downloaded in the image_cache_path before
	// being uploaded to Glance.
	// Conflicts with local_file_path.
	ImageSourceURL *string `json:"imageSourceUrl,omitempty" tf:"image_source_url,omitempty"`

	// The username of basic auth to download image_source_url.
	ImageSourceUsername *string `json:"imageSourceUsername,omitempty" tf:"image_source_username,omitempty"`

	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with image_source_url and
	// web_download.
	LocalFilePath *string `json:"localFilePath,omitempty" tf:"local_file_path,omitempty"`

	// The metadata associated with the image.
	// Image metadata allow for meaningfully define the image properties
	// and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	MinDiskGb *float64 `json:"minDiskGb,omitempty" tf:"min_disk_gb,omitempty"`

	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	MinRAMMb *float64 `json:"minRamMb,omitempty" tf:"min_ram_mb,omitempty"`

	// The name of the image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The id of the openstack user who owns the image.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// If true, image will not be deletable.
	// Defaults to false.
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new Image.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The path to the JSON-schema that represent
	// the image or image
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// The size in bytes of the data associated with the image.
	SizeBytes *float64 `json:"sizeBytes,omitempty" tf:"size_bytes,omitempty"`

	// The status of the image. It can be "queued", "active"
	// or "saving".
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Deprecated - use updated_at instead)
	UpdateAt *string `json:"updateAt,omitempty" tf:"update_at,omitempty"`

	// The date the image was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with web_download.
	// Defaults to true when not using web_download.
	VerifyChecksum *bool `json:"verifyChecksum,omitempty" tf:"verify_checksum,omitempty"`

	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`

	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with local_file_path. Defaults to false.
	WebDownload *bool `json:"webDownload,omitempty" tf:"web_download,omitempty"`
}

type ImageV2Parameters struct {

	// The container format. Must be one of
	// "ami", "ari", "aki", "bare", "ovf".
	// +kubebuilder:validation:Optional
	ContainerFormat *string `json:"containerFormat,omitempty" tf:"container_format,omitempty"`

	// If true, this provider will decompress downloaded
	// image before uploading it to OpenStack. Decompression algorithm is chosen by
	// checking "Content-Type" header, supported algorithm are: gzip, bzip2 and xz.
	// Defaults to false. Changing this creates a new Image.
	// +kubebuilder:validation:Optional
	Decompress *bool `json:"decompress,omitempty" tf:"decompress,omitempty"`

	// The disk format. Must be one of
	// "ami", "ari", "aki", "vhd", "vmdk", "raw", "qcow2", "vdi", "iso".
	// +kubebuilder:validation:Optional
	DiskFormat *string `json:"diskFormat,omitempty" tf:"disk_format,omitempty"`

	// If true, image will be hidden from public list.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	Hidden *bool `json:"hidden,omitempty" tf:"hidden,omitempty"`

	// This is the directory where the images will
	// be downloaded. Images will be stored with a filename corresponding to
	// the url's md5 hash. Defaults to "$HOME/
	// +kubebuilder:validation:Optional
	ImageCachePath *string `json:"imageCachePath,omitempty" tf:"image_cache_path,omitempty"`

	// Unique ID (valid UUID) of image to create. Changing
	// this creates a new image.
	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The password of basic auth to download image_source_url.
	// +kubebuilder:validation:Optional
	ImageSourcePasswordSecretRef *v1.SecretKeySelector `json:"imageSourcePasswordSecretRef,omitempty" tf:"-"`

	// This is the url of the raw image. If web_download
	// is not used, then the image will be downloaded in the image_cache_path before
	// being uploaded to Glance.
	// Conflicts with local_file_path.
	// +kubebuilder:validation:Optional
	ImageSourceURL *string `json:"imageSourceUrl,omitempty" tf:"image_source_url,omitempty"`

	// The username of basic auth to download image_source_url.
	// +kubebuilder:validation:Optional
	ImageSourceUsername *string `json:"imageSourceUsername,omitempty" tf:"image_source_username,omitempty"`

	// This is the filepath of the raw image file
	// that will be uploaded to Glance. Conflicts with image_source_url and
	// web_download.
	// +kubebuilder:validation:Optional
	LocalFilePath *string `json:"localFilePath,omitempty" tf:"local_file_path,omitempty"`

	// Amount of disk space (in GB) required to boot image.
	// Defaults to 0.
	// +kubebuilder:validation:Optional
	MinDiskGb *float64 `json:"minDiskGb,omitempty" tf:"min_disk_gb,omitempty"`

	// Amount of ram (in MB) required to boot image.
	// Defauts to 0.
	// +kubebuilder:validation:Optional
	MinRAMMb *float64 `json:"minRamMb,omitempty" tf:"min_ram_mb,omitempty"`

	// The name of the image.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A map of key/value pairs to set freeform
	// information about an image. See the "Notes" section for further
	// information about properties.
	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// If true, image will not be deletable.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	Protected *bool `json:"protected,omitempty" tf:"protected,omitempty"`

	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to create an Image that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new Image.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The tags of the image. It must be a list of strings.
	// At this time, it is not possible to delete all tags of an image.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// If false, the checksum will not be verified
	// once the image is finished uploading. Conflicts with web_download.
	// Defaults to true when not using web_download.
	// +kubebuilder:validation:Optional
	VerifyChecksum *bool `json:"verifyChecksum,omitempty" tf:"verify_checksum,omitempty"`

	// The visibility of the image. Must be one of
	// "public", "private", "community", or "shared". The ability to set the
	// visibility depends upon the configuration of the OpenStack cloud.
	// +kubebuilder:validation:Optional
	Visibility *string `json:"visibility,omitempty" tf:"visibility,omitempty"`

	// If true, the "web-download" import method will
	// be used to let Openstack download the image directly from the remote source.
	// Conflicts with local_file_path. Defaults to false.
	// +kubebuilder:validation:Optional
	WebDownload *bool `json:"webDownload,omitempty" tf:"web_download,omitempty"`
}

// ImageV2Spec defines the desired state of ImageV2
type ImageV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageV2InitParameters `json:"initProvider,omitempty"`
}

// ImageV2Status defines the observed state of ImageV2.
type ImageV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageV2 is the Schema for the ImageV2s API. Manages a V2 Image resource within OpenStack Glance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ImageV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.containerFormat) || (has(self.initProvider) && has(self.initProvider.containerFormat))",message="spec.forProvider.containerFormat is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.diskFormat) || (has(self.initProvider) && has(self.initProvider.diskFormat))",message="spec.forProvider.diskFormat is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ImageV2Spec   `json:"spec"`
	Status ImageV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageV2List contains a list of ImageV2s
type ImageV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageV2 `json:"items"`
}

// Repository type metadata.
var (
	ImageV2_Kind             = "ImageV2"
	ImageV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageV2_Kind}.String()
	ImageV2_KindAPIVersion   = ImageV2_Kind + "." + CRDGroupVersion.String()
	ImageV2_GroupVersionKind = CRDGroupVersion.WithKind(ImageV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageV2{}, &ImageV2List{})
}
