/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
Copyright 2025 Yannick Schlosser, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TempurlV1InitParameters struct {

	// The container name the object belongs to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/objectstorage/v1alpha1.ContainerV1
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// Reference to a ContainerV1 in objectstorage to populate container.
	// +kubebuilder:validation:Optional
	ContainerRef *v1.Reference `json:"containerRef,omitempty" tf:"-"`

	// Selector for a ContainerV1 in objectstorage to populate container.
	// +kubebuilder:validation:Optional
	ContainerSelector *v1.Selector `json:"containerSelector,omitempty" tf:"-"`

	// The digest to use when generating the tempurl.
	// Supported values are sha1, sha256 and sha512. Default is sha1.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// The key to use when generating the tempurl. If not
	// provided, the key will be read from the container or account metadata.
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// The method allowed when accessing this URL.
	// Valid values are GET, and POST. Default is GET.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// The object name the tempurl is for.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/objectstorage/v1alpha1.ObjectV1
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	Object *string `json:"object,omitempty" tf:"object,omitempty"`

	// Reference to a ObjectV1 in objectstorage to populate object.
	// +kubebuilder:validation:Optional
	ObjectRef *v1.Reference `json:"objectRef,omitempty" tf:"-"`

	// Selector for a ObjectV1 in objectstorage to populate object.
	// +kubebuilder:validation:Optional
	ObjectSelector *v1.Selector `json:"objectSelector,omitempty" tf:"-"`

	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate *bool `json:"regenerate,omitempty" tf:"regenerate,omitempty"`

	// The region the tempurl is located in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Split is the string on which to split the object URL.
	// Default is /v1/.
	Split *string `json:"split,omitempty" tf:"split,omitempty"`

	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type TempurlV1Observation struct {

	// The container name the object belongs to.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// The digest to use when generating the tempurl.
	// Supported values are sha1, sha256 and sha512. Default is sha1.
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// Computed md5 hash based on the generated url
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The method allowed when accessing this URL.
	// Valid values are GET, and POST. Default is GET.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// The object name the tempurl is for.
	Object *string `json:"object,omitempty" tf:"object,omitempty"`

	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	Regenerate *bool `json:"regenerate,omitempty" tf:"regenerate,omitempty"`

	// The region the tempurl is located in.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Split is the string on which to split the object URL.
	// Default is /v1/.
	Split *string `json:"split,omitempty" tf:"split,omitempty"`

	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type TempurlV1Parameters struct {

	// The container name the object belongs to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/objectstorage/v1alpha1.ContainerV1
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// Reference to a ContainerV1 in objectstorage to populate container.
	// +kubebuilder:validation:Optional
	ContainerRef *v1.Reference `json:"containerRef,omitempty" tf:"-"`

	// Selector for a ContainerV1 in objectstorage to populate container.
	// +kubebuilder:validation:Optional
	ContainerSelector *v1.Selector `json:"containerSelector,omitempty" tf:"-"`

	// The digest to use when generating the tempurl.
	// Supported values are sha1, sha256 and sha512. Default is sha1.
	// +kubebuilder:validation:Optional
	Digest *string `json:"digest,omitempty" tf:"digest,omitempty"`

	// The key to use when generating the tempurl. If not
	// provided, the key will be read from the container or account metadata.
	// +kubebuilder:validation:Optional
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// The method allowed when accessing this URL.
	// Valid values are GET, and POST. Default is GET.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// The object name the tempurl is for.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/objectstorage/v1alpha1.ObjectV1
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("name",false)
	// +kubebuilder:validation:Optional
	Object *string `json:"object,omitempty" tf:"object,omitempty"`

	// Reference to a ObjectV1 in objectstorage to populate object.
	// +kubebuilder:validation:Optional
	ObjectRef *v1.Reference `json:"objectRef,omitempty" tf:"-"`

	// Selector for a ObjectV1 in objectstorage to populate object.
	// +kubebuilder:validation:Optional
	ObjectSelector *v1.Selector `json:"objectSelector,omitempty" tf:"-"`

	// Whether to automatically regenerate the URL when
	// it has expired. If set to true, this will create a new resource with a new
	// ID and new URL. Defaults to false.
	// +kubebuilder:validation:Optional
	Regenerate *bool `json:"regenerate,omitempty" tf:"regenerate,omitempty"`

	// The region the tempurl is located in.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Split is the string on which to split the object URL.
	// Default is /v1/.
	// +kubebuilder:validation:Optional
	Split *string `json:"split,omitempty" tf:"split,omitempty"`

	// The TTL, in seconds, for the URL. For how long it should
	// be valid.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// TempurlV1Spec defines the desired state of TempurlV1
type TempurlV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TempurlV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TempurlV1InitParameters `json:"initProvider,omitempty"`
}

// TempurlV1Status defines the observed state of TempurlV1.
type TempurlV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TempurlV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TempurlV1 is the Schema for the TempurlV1s API. Generate a TempURL for a Swift container and object.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type TempurlV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ttl) || (has(self.initProvider) && has(self.initProvider.ttl))",message="spec.forProvider.ttl is a required parameter"
	Spec   TempurlV1Spec   `json:"spec"`
	Status TempurlV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TempurlV1List contains a list of TempurlV1s
type TempurlV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TempurlV1 `json:"items"`
}

// Repository type metadata.
var (
	TempurlV1_Kind             = "TempurlV1"
	TempurlV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TempurlV1_Kind}.String()
	TempurlV1_KindAPIVersion   = TempurlV1_Kind + "." + CRDGroupVersion.String()
	TempurlV1_GroupVersionKind = CRDGroupVersion.WithKind(TempurlV1_Kind)
)

func init() {
	SchemeBuilder.Register(&TempurlV1{}, &TempurlV1List{})
}
