// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerV1InitParameters struct {

	// Sets an access control list (ACL) that grants
	// read access. This header can contain a comma-delimited list of users that
	// can read the container (allows the GET method for all objects in the
	// container). Changing this updates the access control list read access.
	ContainerRead *string `json:"containerRead,omitempty" tf:"container_read,omitempty"`

	// The secret key for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncKey *string `json:"containerSyncKey,omitempty" tf:"container_sync_key,omitempty"`

	// The destination for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncTo *string `json:"containerSyncTo,omitempty" tf:"container_sync_to,omitempty"`

	// Sets an ACL that grants write access.
	// Changing this updates the access control list write access.
	ContainerWrite *string `json:"containerWrite,omitempty" tf:"container_write,omitempty"`

	// The MIME type for the container. Changing this
	// updates the MIME type.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Custom key/value pairs to associate with the container.
	// Changing this updates the existing container metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the container. Changing this creates a
	// new container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the container. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new container.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The storage policy to be used for the container.
	// Changing this creates a new container.
	StoragePolicy *string `json:"storagePolicy,omitempty" tf:"storage_policy,omitempty"`

	// A boolean that can enable or disable object
	// versioning. The default value is false. To use this feature, your Swift
	// version must be 2.24 or higher (as described in the OpenStack Swift Ussuri release notes),
	// and a cloud administrator must have set the allow_object_versioning = true
	// configuration option in Swift. If you cannot set this versioning type, you may
	// want to consider using versioning_legacy instead.
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// (Deprecated) Enable legacy object versioning. The structure is described below.
	VersioningLegacy []VersioningLegacyInitParameters `json:"versioningLegacy,omitempty" tf:"versioning_legacy,omitempty"`
}

type ContainerV1Observation struct {

	// Sets an access control list (ACL) that grants
	// read access. This header can contain a comma-delimited list of users that
	// can read the container (allows the GET method for all objects in the
	// container). Changing this updates the access control list read access.
	ContainerRead *string `json:"containerRead,omitempty" tf:"container_read,omitempty"`

	// The secret key for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncKey *string `json:"containerSyncKey,omitempty" tf:"container_sync_key,omitempty"`

	// The destination for container synchronization.
	// Changing this updates container synchronization.
	ContainerSyncTo *string `json:"containerSyncTo,omitempty" tf:"container_sync_to,omitempty"`

	// Sets an ACL that grants write access.
	// Changing this updates the access control list write access.
	ContainerWrite *string `json:"containerWrite,omitempty" tf:"container_write,omitempty"`

	// The MIME type for the container. Changing this
	// updates the MIME type.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Custom key/value pairs to associate with the container.
	// Changing this updates the existing container metadata.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the container. Changing this creates a
	// new container.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the container. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new container.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The storage policy to be used for the container.
	// Changing this creates a new container.
	StoragePolicy *string `json:"storagePolicy,omitempty" tf:"storage_policy,omitempty"`

	// A boolean that can enable or disable object
	// versioning. The default value is false. To use this feature, your Swift
	// version must be 2.24 or higher (as described in the OpenStack Swift Ussuri release notes),
	// and a cloud administrator must have set the allow_object_versioning = true
	// configuration option in Swift. If you cannot set this versioning type, you may
	// want to consider using versioning_legacy instead.
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// (Deprecated) Enable legacy object versioning. The structure is described below.
	VersioningLegacy []VersioningLegacyObservation `json:"versioningLegacy,omitempty" tf:"versioning_legacy,omitempty"`
}

type ContainerV1Parameters struct {

	// Sets an access control list (ACL) that grants
	// read access. This header can contain a comma-delimited list of users that
	// can read the container (allows the GET method for all objects in the
	// container). Changing this updates the access control list read access.
	// +kubebuilder:validation:Optional
	ContainerRead *string `json:"containerRead,omitempty" tf:"container_read,omitempty"`

	// The secret key for container synchronization.
	// Changing this updates container synchronization.
	// +kubebuilder:validation:Optional
	ContainerSyncKey *string `json:"containerSyncKey,omitempty" tf:"container_sync_key,omitempty"`

	// The destination for container synchronization.
	// Changing this updates container synchronization.
	// +kubebuilder:validation:Optional
	ContainerSyncTo *string `json:"containerSyncTo,omitempty" tf:"container_sync_to,omitempty"`

	// Sets an ACL that grants write access.
	// Changing this updates the access control list write access.
	// +kubebuilder:validation:Optional
	ContainerWrite *string `json:"containerWrite,omitempty" tf:"container_write,omitempty"`

	// The MIME type for the container. Changing this
	// updates the MIME type.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// A boolean that indicates all objects should be deleted from the container so that the container can be destroyed without error. These objects are not recoverable.
	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// Custom key/value pairs to associate with the container.
	// Changing this updates the existing container metadata.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// A unique name for the container. Changing this creates a
	// new container.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the container. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new container.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The storage policy to be used for the container.
	// Changing this creates a new container.
	// +kubebuilder:validation:Optional
	StoragePolicy *string `json:"storagePolicy,omitempty" tf:"storage_policy,omitempty"`

	// A boolean that can enable or disable object
	// versioning. The default value is false. To use this feature, your Swift
	// version must be 2.24 or higher (as described in the OpenStack Swift Ussuri release notes),
	// and a cloud administrator must have set the allow_object_versioning = true
	// configuration option in Swift. If you cannot set this versioning type, you may
	// want to consider using versioning_legacy instead.
	// +kubebuilder:validation:Optional
	Versioning *bool `json:"versioning,omitempty" tf:"versioning,omitempty"`

	// (Deprecated) Enable legacy object versioning. The structure is described below.
	// +kubebuilder:validation:Optional
	VersioningLegacy []VersioningLegacyParameters `json:"versioningLegacy,omitempty" tf:"versioning_legacy,omitempty"`
}

type VersioningLegacyInitParameters struct {

	// Container in which versions will be stored.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Versioning type which can be versions or history according to Openstack documentation.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VersioningLegacyObservation struct {

	// Container in which versions will be stored.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// Versioning type which can be versions or history according to Openstack documentation.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VersioningLegacyParameters struct {

	// Container in which versions will be stored.
	// +kubebuilder:validation:Optional
	Location *string `json:"location" tf:"location,omitempty"`

	// Versioning type which can be versions or history according to Openstack documentation.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ContainerV1Spec defines the desired state of ContainerV1
type ContainerV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerV1InitParameters `json:"initProvider,omitempty"`
}

// ContainerV1Status defines the observed state of ContainerV1.
type ContainerV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerV1 is the Schema for the ContainerV1s API. Manages a V1 container resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ContainerV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ContainerV1Spec   `json:"spec"`
	Status ContainerV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerV1List contains a list of ContainerV1s
type ContainerV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContainerV1 `json:"items"`
}

// Repository type metadata.
var (
	ContainerV1_Kind             = "ContainerV1"
	ContainerV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContainerV1_Kind}.String()
	ContainerV1_KindAPIVersion   = ContainerV1_Kind + "." + CRDGroupVersion.String()
	ContainerV1_GroupVersionKind = CRDGroupVersion.WithKind(ContainerV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ContainerV1{}, &ContainerV1List{})
}
