/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
Copyright 2025 Yannick Schlosser, Jan Dittrich
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ObjectV1.
func (mg *ObjectV1) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ContainerName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.ContainerNameRef,
		Selector:     mg.Spec.ForProvider.ContainerNameSelector,
		To: reference.To{
			List:    &ContainerV1List{},
			Managed: &ContainerV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ContainerName")
	}
	mg.Spec.ForProvider.ContainerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ContainerName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.ContainerNameRef,
		Selector:     mg.Spec.InitProvider.ContainerNameSelector,
		To: reference.To{
			List:    &ContainerV1List{},
			Managed: &ContainerV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ContainerName")
	}
	mg.Spec.InitProvider.ContainerName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TempurlV1.
func (mg *TempurlV1) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Container),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.ContainerRef,
		Selector:     mg.Spec.ForProvider.ContainerSelector,
		To: reference.To{
			List:    &ContainerV1List{},
			Managed: &ContainerV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Container")
	}
	mg.Spec.ForProvider.Container = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ContainerRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Object),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.ObjectRef,
		Selector:     mg.Spec.ForProvider.ObjectSelector,
		To: reference.To{
			List:    &ObjectV1List{},
			Managed: &ObjectV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Object")
	}
	mg.Spec.ForProvider.Object = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ObjectRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Container),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.ContainerRef,
		Selector:     mg.Spec.InitProvider.ContainerSelector,
		To: reference.To{
			List:    &ContainerV1List{},
			Managed: &ContainerV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Container")
	}
	mg.Spec.InitProvider.Container = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ContainerRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Object),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.ObjectRef,
		Selector:     mg.Spec.InitProvider.ObjectSelector,
		To: reference.To{
			List:    &ObjectV1List{},
			Managed: &ObjectV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Object")
	}
	mg.Spec.InitProvider.Object = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ObjectRef = rsp.ResolvedReference

	return nil
}
