// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetaInitParameters struct {

	// Algorithm to use for key generation.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// - Bit lenght of key to be generated.
	BitLength *float64 `json:"bitLength,omitempty" tf:"bit_length,omitempty"`

	// This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The mode to use for key generation.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name of the secret set by the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The media type for the content of the secrets payload. Must be one of text/plain, text/plain;charset=utf-8, text/plain; charset=utf-8, application/octet-stream, application/pkcs8.
	PayloadContentType *string `json:"payloadContentType,omitempty" tf:"payload_content_type,omitempty"`
}

type MetaObservation struct {

	// Algorithm to use for key generation.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// - Bit lenght of key to be generated.
	BitLength *float64 `json:"bitLength,omitempty" tf:"bit_length,omitempty"`

	// This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The mode to use for key generation.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name of the secret set by the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The media type for the content of the secrets payload. Must be one of text/plain, text/plain;charset=utf-8, text/plain; charset=utf-8, application/octet-stream, application/pkcs8.
	PayloadContentType *string `json:"payloadContentType,omitempty" tf:"payload_content_type,omitempty"`
}

type MetaParameters struct {

	// Algorithm to use for key generation.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// - Bit lenght of key to be generated.
	// +kubebuilder:validation:Optional
	BitLength *float64 `json:"bitLength" tf:"bit_length,omitempty"`

	// This is a UTC timestamp in ISO 8601 format YYYY-MM-DDTHH:MM:SSZ. If set, the secret will not be available after this time.
	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// The mode to use for key generation.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name of the secret set by the user.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The media type for the content of the secrets payload. Must be one of text/plain, text/plain;charset=utf-8, text/plain; charset=utf-8, application/octet-stream, application/pkcs8.
	// +kubebuilder:validation:Optional
	PayloadContentType *string `json:"payloadContentType,omitempty" tf:"payload_content_type,omitempty"`
}

type OrderV1InitParameters struct {

	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta []MetaInitParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// V1 order.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of key to be generated. Must be one of asymmetric, key.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OrderV1Observation struct {

	// The container reference / where to find the container.
	ContainerRef *string `json:"containerRef,omitempty" tf:"container_ref,omitempty"`

	// The date the order was created.
	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	// The creator of the order.
	CreatorID *string `json:"creatorId,omitempty" tf:"creator_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	Meta []MetaObservation `json:"meta,omitempty" tf:"meta,omitempty"`

	// The order reference / where to find the order.
	OrderRef *string `json:"orderRef,omitempty" tf:"order_ref,omitempty"`

	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// V1 order.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The secret reference / where to find the secret.
	SecretRef *string `json:"secretRef,omitempty" tf:"secret_ref,omitempty"`

	// The status of the order.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The sub status of the order.
	SubStatus *string `json:"subStatus,omitempty" tf:"sub_status,omitempty"`

	// The sub status message of the order.
	SubStatusMessage *string `json:"subStatusMessage,omitempty" tf:"sub_status_message,omitempty"`

	// The type of key to be generated. Must be one of asymmetric, key.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The date the order was last updated.
	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type OrderV1Parameters struct {

	// Dictionary containing the order metadata used to generate the order. The structure is described below.
	// +kubebuilder:validation:Optional
	Meta []MetaParameters `json:"meta,omitempty" tf:"meta,omitempty"`

	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a order. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// V1 order.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The type of key to be generated. Must be one of asymmetric, key.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// OrderV1Spec defines the desired state of OrderV1
type OrderV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrderV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrderV1InitParameters `json:"initProvider,omitempty"`
}

// OrderV1Status defines the observed state of OrderV1.
type OrderV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrderV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrderV1 is the Schema for the OrderV1s API. Manages a V1 Barbican order resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type OrderV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meta) || (has(self.initProvider) && has(self.initProvider.meta))",message="spec.forProvider.meta is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   OrderV1Spec   `json:"spec"`
	Status OrderV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrderV1List contains a list of OrderV1s
type OrderV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrderV1 `json:"items"`
}

// Repository type metadata.
var (
	OrderV1_Kind             = "OrderV1"
	OrderV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrderV1_Kind}.String()
	OrderV1_KindAPIVersion   = OrderV1_Kind + "." + CRDGroupVersion.String()
	OrderV1_GroupVersionKind = CRDGroupVersion.WithKind(OrderV1_Kind)
)

func init() {
	SchemeBuilder.Register(&OrderV1{}, &OrderV1List{})
}
