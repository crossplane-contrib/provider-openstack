// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleV2InitParameters struct {

	// Action to be taken (must be "allow", "deny" or "reject")
	// when the firewall rule matches. Changing this updates the action of an
	// existing firewall rule. Default is deny.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A description for the firewall rule. Changing this
	// updates the description of an existing firewall rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP address on which the
	// firewall rule operates. Changing this updates the destination_ip_address
	// of an existing firewall rule.
	DestinationIPAddress *string `json:"destinationIpAddress,omitempty" tf:"destination_ip_address,omitempty"`

	// The destination port on which the firewall
	// rule operates. Changing this updates the destination_port of an existing
	// firewall rule. Require not any or empty protocol.
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Enabled status for the firewall rule (must be "true"
	// or "false" if provided - defaults to "true"). Changing this updates the
	// enabled status of an existing firewall rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IP version, either 4 or 6. Changing this
	// updates the ip_version of an existing firewall rule. Default is 4.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// A unique name for the firewall rule. Changing this
	// updates the name of an existing firewall rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// - This argument conflicts and is interchangeable
	// with tenant_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another project. Changing this creates a new
	// firewall rule.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The protocol type on which the firewall rule operates.
	// Valid values are: tcp, udp, icmp, and any. Changing this updates the
	// protocol of an existing firewall rule. Default is any.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall rule (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall policy. On
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The source IP address on which the firewall
	// rule operates. Changing this updates the source_ip_address of an existing
	// firewall rule.
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// The source port on which the firewall
	// rule operates. Changing this updates the source_port of an existing
	// firewall rule. Require not any or empty protocol.
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// - This argument conflicts and is interchangeable
	// with project_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another tenant. Changing this creates a new
	// firewall rule.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type RuleV2Observation struct {

	// Action to be taken (must be "allow", "deny" or "reject")
	// when the firewall rule matches. Changing this updates the action of an
	// existing firewall rule. Default is deny.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A description for the firewall rule. Changing this
	// updates the description of an existing firewall rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP address on which the
	// firewall rule operates. Changing this updates the destination_ip_address
	// of an existing firewall rule.
	DestinationIPAddress *string `json:"destinationIpAddress,omitempty" tf:"destination_ip_address,omitempty"`

	// The destination port on which the firewall
	// rule operates. Changing this updates the destination_port of an existing
	// firewall rule. Require not any or empty protocol.
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Enabled status for the firewall rule (must be "true"
	// or "false" if provided - defaults to "true"). Changing this updates the
	// enabled status of an existing firewall rule.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version, either 4 or 6. Changing this
	// updates the ip_version of an existing firewall rule. Default is 4.
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// A unique name for the firewall rule. Changing this
	// updates the name of an existing firewall rule.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// - This argument conflicts and is interchangeable
	// with tenant_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another project. Changing this creates a new
	// firewall rule.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The protocol type on which the firewall rule operates.
	// Valid values are: tcp, udp, icmp, and any. Changing this updates the
	// protocol of an existing firewall rule. Default is any.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall rule (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall policy. On
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The source IP address on which the firewall
	// rule operates. Changing this updates the source_ip_address of an existing
	// firewall rule.
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// The source port on which the firewall
	// rule operates. Changing this updates the source_port of an existing
	// firewall rule. Require not any or empty protocol.
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// - This argument conflicts and is interchangeable
	// with project_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another tenant. Changing this creates a new
	// firewall rule.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type RuleV2Parameters struct {

	// Action to be taken (must be "allow", "deny" or "reject")
	// when the firewall rule matches. Changing this updates the action of an
	// existing firewall rule. Default is deny.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A description for the firewall rule. Changing this
	// updates the description of an existing firewall rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination IP address on which the
	// firewall rule operates. Changing this updates the destination_ip_address
	// of an existing firewall rule.
	// +kubebuilder:validation:Optional
	DestinationIPAddress *string `json:"destinationIpAddress,omitempty" tf:"destination_ip_address,omitempty"`

	// The destination port on which the firewall
	// rule operates. Changing this updates the destination_port of an existing
	// firewall rule. Require not any or empty protocol.
	// +kubebuilder:validation:Optional
	DestinationPort *string `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// Enabled status for the firewall rule (must be "true"
	// or "false" if provided - defaults to "true"). Changing this updates the
	// enabled status of an existing firewall rule.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IP version, either 4 or 6. Changing this
	// updates the ip_version of an existing firewall rule. Default is 4.
	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// A unique name for the firewall rule. Changing this
	// updates the name of an existing firewall rule.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// - This argument conflicts and is interchangeable
	// with tenant_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another project. Changing this creates a new
	// firewall rule.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The protocol type on which the firewall rule operates.
	// Valid values are: tcp, udp, icmp, and any. Changing this updates the
	// protocol of an existing firewall rule. Default is any.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall rule. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall rule (must be "true"
	// or "false" if provided). If this is "true" the policy is visible to, and
	// can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall policy. On
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The source IP address on which the firewall
	// rule operates. Changing this updates the source_ip_address of an existing
	// firewall rule.
	// +kubebuilder:validation:Optional
	SourceIPAddress *string `json:"sourceIpAddress,omitempty" tf:"source_ip_address,omitempty"`

	// The source port on which the firewall
	// rule operates. Changing this updates the source_port of an existing
	// firewall rule. Require not any or empty protocol.
	// +kubebuilder:validation:Optional
	SourcePort *string `json:"sourcePort,omitempty" tf:"source_port,omitempty"`

	// - This argument conflicts and is interchangeable
	// with project_id. The owner of the firewall rule. Required if admin wants
	// to create a firewall rule for another tenant. Changing this creates a new
	// firewall rule.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// RuleV2Spec defines the desired state of RuleV2
type RuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleV2InitParameters `json:"initProvider,omitempty"`
}

// RuleV2Status defines the observed state of RuleV2.
type RuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleV2 is the Schema for the RuleV2s API. Manages a v2 firewall rule resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type RuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleV2Spec   `json:"spec"`
	Status            RuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleV2List contains a list of RuleV2s
type RuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleV2 `json:"items"`
}

// Repository type metadata.
var (
	RuleV2_Kind             = "RuleV2"
	RuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleV2_Kind}.String()
	RuleV2_KindAPIVersion   = RuleV2_Kind + "." + CRDGroupVersion.String()
	RuleV2_GroupVersionKind = CRDGroupVersion.WithKind(RuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleV2{}, &RuleV2List{})
}
