// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupV2InitParameters struct {

	// Administrative up/down status for the firewall
	// group (must be "true" or "false" if provided - defaults to "true").
	// Changing this updates the admin_state_up of an existing firewall group.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A description for the firewall group. Changing this
	// updates the description of an existing firewall group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The egress firewall policy resource
	// id for the firewall group. Changing this updates the
	// egress_firewall_policy_id of an existing firewall group.
	EgressFirewallPolicyID *string `json:"egressFirewallPolicyId,omitempty" tf:"egress_firewall_policy_id,omitempty"`

	// The ingress firewall policy resource
	// id for the firewall group. Changing this updates the
	// ingress_firewall_policy_id of an existing firewall group.
	IngressFirewallPolicyID *string `json:"ingressFirewallPolicyId,omitempty" tf:"ingress_firewall_policy_id,omitempty"`

	// A name for the firewall group. Changing this
	// updates the name of an existing firewall.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port(s) to associate this firewall group
	// with. Must be a list of strings. Changing this updates the associated ports
	// of an existing firewall group.
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// - This argument conflicts and  is interchangeable
	// with tenant_id. The owner of the firewall group. Required if admin wants
	// to create a firewall group for another project. Changing this creates a new
	// firewall group.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall group (must be "true"
	// or "false" if provided). If this is "true" the firewall group is visible to,
	// and can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall group. Only administrative users
	// can specify if the firewall group should be shared.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// - This argument conflicts and is interchangeable with
	// project_id. The owner of the firewall group. Required if admin wants to
	// create a firewall group for another tenant. Changing this creates a new
	// firewall group.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type GroupV2Observation struct {

	// Administrative up/down status for the firewall
	// group (must be "true" or "false" if provided - defaults to "true").
	// Changing this updates the admin_state_up of an existing firewall group.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A description for the firewall group. Changing this
	// updates the description of an existing firewall group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The egress firewall policy resource
	// id for the firewall group. Changing this updates the
	// egress_firewall_policy_id of an existing firewall group.
	EgressFirewallPolicyID *string `json:"egressFirewallPolicyId,omitempty" tf:"egress_firewall_policy_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ingress firewall policy resource
	// id for the firewall group. Changing this updates the
	// ingress_firewall_policy_id of an existing firewall group.
	IngressFirewallPolicyID *string `json:"ingressFirewallPolicyId,omitempty" tf:"ingress_firewall_policy_id,omitempty"`

	// A name for the firewall group. Changing this
	// updates the name of an existing firewall.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port(s) to associate this firewall group
	// with. Must be a list of strings. Changing this updates the associated ports
	// of an existing firewall group.
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// - This argument conflicts and  is interchangeable
	// with tenant_id. The owner of the firewall group. Required if admin wants
	// to create a firewall group for another project. Changing this creates a new
	// firewall group.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall group (must be "true"
	// or "false" if provided). If this is "true" the firewall group is visible to,
	// and can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall group. Only administrative users
	// can specify if the firewall group should be shared.
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// The status of the firewall group.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// - This argument conflicts and is interchangeable with
	// project_id. The owner of the firewall group. Required if admin wants to
	// create a firewall group for another tenant. Changing this creates a new
	// firewall group.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type GroupV2Parameters struct {

	// Administrative up/down status for the firewall
	// group (must be "true" or "false" if provided - defaults to "true").
	// Changing this updates the admin_state_up of an existing firewall group.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A description for the firewall group. Changing this
	// updates the description of an existing firewall group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The egress firewall policy resource
	// id for the firewall group. Changing this updates the
	// egress_firewall_policy_id of an existing firewall group.
	// +kubebuilder:validation:Optional
	EgressFirewallPolicyID *string `json:"egressFirewallPolicyId,omitempty" tf:"egress_firewall_policy_id,omitempty"`

	// The ingress firewall policy resource
	// id for the firewall group. Changing this updates the
	// ingress_firewall_policy_id of an existing firewall group.
	// +kubebuilder:validation:Optional
	IngressFirewallPolicyID *string `json:"ingressFirewallPolicyId,omitempty" tf:"ingress_firewall_policy_id,omitempty"`

	// A name for the firewall group. Changing this
	// updates the name of an existing firewall.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port(s) to associate this firewall group
	// with. Must be a list of strings. Changing this updates the associated ports
	// of an existing firewall group.
	// +kubebuilder:validation:Optional
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// - This argument conflicts and  is interchangeable
	// with tenant_id. The owner of the firewall group. Required if admin wants
	// to create a firewall group for another project. Changing this creates a new
	// firewall group.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the v2 networking client.
	// A networking client is needed to create a firewall group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// firewall group.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Sharing status of the firewall group (must be "true"
	// or "false" if provided). If this is "true" the firewall group is visible to,
	// and can be used in, firewalls in other tenants. Changing this updates the
	// shared status of an existing firewall group. Only administrative users
	// can specify if the firewall group should be shared.
	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// - This argument conflicts and is interchangeable with
	// project_id. The owner of the firewall group. Required if admin wants to
	// create a firewall group for another tenant. Changing this creates a new
	// firewall group.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// GroupV2Spec defines the desired state of GroupV2
type GroupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupV2InitParameters `json:"initProvider,omitempty"`
}

// GroupV2Status defines the observed state of GroupV2.
type GroupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV2 is the Schema for the GroupV2s API. Manages a v2 firewall group resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type GroupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupV2Spec   `json:"spec"`
	Status            GroupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupV2List contains a list of GroupV2s
type GroupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupV2 `json:"items"`
}

// Repository type metadata.
var (
	GroupV2_Kind             = "GroupV2"
	GroupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupV2_Kind}.String()
	GroupV2_KindAPIVersion   = GroupV2_Kind + "." + CRDGroupVersion.String()
	GroupV2_GroupVersionKind = CRDGroupVersion.WithKind(GroupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupV2{}, &GroupV2List{})
}
