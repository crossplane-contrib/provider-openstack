/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProjectV3Parameters struct {

	// A description of the project.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The domain this project belongs to.
	// +kubebuilder:validation:Optional
	DomainID *string `json:"domainId,omitempty" tf:"domain_id,omitempty"`

	// Whether the project is enabled or disabled. Valid
	// values are true and false. Default is true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Whether this project is a domain. Valid values
	// are true and false. Default is false. Changing this creates a new
	// project/domain.
	// +kubebuilder:validation:Optional
	IsDomain *bool `json:"isDomain,omitempty" tf:"is_domain,omitempty"`

	// The name of the project.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The parent of this project. Changing this creates
	// a new project.
	// +kubebuilder:validation:Optional
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// The region in which to obtain the V3 Keystone client.
	// If omitted, the region argument of the provider is used. Changing this
	// creates a new project.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Tags for the project. Changing this updates the existing
	// project.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ProjectV3Spec defines the desired state of ProjectV3
type ProjectV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectV3Parameters `json:"forProvider"`
}

// ProjectV3Status defines the observed state of ProjectV3.
type ProjectV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectV3 is the Schema for the ProjectV3s API. Manages a V3 Project resource within OpenStack Keystone.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ProjectV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProjectV3Spec   `json:"spec"`
	Status            ProjectV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectV3List contains a list of ProjectV3s
type ProjectV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProjectV3 `json:"items"`
}

// Repository type metadata.
var (
	ProjectV3_Kind             = "ProjectV3"
	ProjectV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProjectV3_Kind}.String()
	ProjectV3_KindAPIVersion   = ProjectV3_Kind + "." + CRDGroupVersion.String()
	ProjectV3_GroupVersionKind = CRDGroupVersion.WithKind(ProjectV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ProjectV3{}, &ProjectV3List{})
}
