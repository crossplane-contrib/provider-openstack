/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this SiteConnectionV2.
func (mg *SiteConnectionV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IkepolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IkepolicyIDRef,
		Selector:     mg.Spec.ForProvider.IkepolicyIDSelector,
		To: reference.To{
			List:    &IkePolicyV2List{},
			Managed: &IkePolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IkepolicyID")
	}
	mg.Spec.ForProvider.IkepolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IkepolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IpsecpolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.IpsecpolicyIDRef,
		Selector:     mg.Spec.ForProvider.IpsecpolicyIDSelector,
		To: reference.To{
			List:    &IpsecPolicyV2List{},
			Managed: &IpsecPolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IpsecpolicyID")
	}
	mg.Spec.ForProvider.IpsecpolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IpsecpolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LocalEpGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.LocalEpGroupIDRef,
		Selector:     mg.Spec.ForProvider.LocalEpGroupIDSelector,
		To: reference.To{
			List:    &EndpointGroupV2List{},
			Managed: &EndpointGroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LocalEpGroupID")
	}
	mg.Spec.ForProvider.LocalEpGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LocalEpGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PeerEpGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PeerEpGroupIDRef,
		Selector:     mg.Spec.ForProvider.PeerEpGroupIDSelector,
		To: reference.To{
			List:    &EndpointGroupV2List{},
			Managed: &EndpointGroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PeerEpGroupID")
	}
	mg.Spec.ForProvider.PeerEpGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PeerEpGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VpnserviceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.VpnserviceIDRef,
		Selector:     mg.Spec.ForProvider.VpnserviceIDSelector,
		To: reference.To{
			List:    &ServiceV2List{},
			Managed: &ServiceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VpnserviceID")
	}
	mg.Spec.ForProvider.VpnserviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VpnserviceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IkepolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.IkepolicyIDRef,
		Selector:     mg.Spec.InitProvider.IkepolicyIDSelector,
		To: reference.To{
			List:    &IkePolicyV2List{},
			Managed: &IkePolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IkepolicyID")
	}
	mg.Spec.InitProvider.IkepolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IkepolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IpsecpolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.IpsecpolicyIDRef,
		Selector:     mg.Spec.InitProvider.IpsecpolicyIDSelector,
		To: reference.To{
			List:    &IpsecPolicyV2List{},
			Managed: &IpsecPolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IpsecpolicyID")
	}
	mg.Spec.InitProvider.IpsecpolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IpsecpolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LocalEpGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.LocalEpGroupIDRef,
		Selector:     mg.Spec.InitProvider.LocalEpGroupIDSelector,
		To: reference.To{
			List:    &EndpointGroupV2List{},
			Managed: &EndpointGroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LocalEpGroupID")
	}
	mg.Spec.InitProvider.LocalEpGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LocalEpGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PeerEpGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.PeerEpGroupIDRef,
		Selector:     mg.Spec.InitProvider.PeerEpGroupIDSelector,
		To: reference.To{
			List:    &EndpointGroupV2List{},
			Managed: &EndpointGroupV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PeerEpGroupID")
	}
	mg.Spec.InitProvider.PeerEpGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PeerEpGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VpnserviceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.VpnserviceIDRef,
		Selector:     mg.Spec.InitProvider.VpnserviceIDSelector,
		To: reference.To{
			List:    &ServiceV2List{},
			Managed: &ServiceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VpnserviceID")
	}
	mg.Spec.InitProvider.VpnserviceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VpnserviceIDRef = rsp.ResolvedReference

	return nil
}
