// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IkePolicyV2InitParameters struct {

	// The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512.
	// Default is sha1. Changing this updates the algorithm of the existing policy.
	AuthAlgorithm *string `json:"authAlgorithm,omitempty" tf:"auth_algorithm,omitempty"`

	// The human-readable description for the policy.
	// Changing this updates the description of the existing policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on.
	// The default value is aes-128. Changing this updates the existing policy.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The IKE mode. A valid value is v1 or v2. Default is v1.
	// Changing this updates the existing policy.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The lifetime of the security association. Consists of Unit and Value.
	Lifetime []LifetimeInitParameters `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// The name of the policy. Changing this updates the name of
	// the existing policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5.
	// Changing this updates the existing policy.
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The IKE mode. A valid value is main, which is the default.
	// Changing this updates the existing policy.
	Phase1NegotiationMode *string `json:"phase1NegotiationMode,omitempty" tf:"phase1_negotiation_mode,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VPN service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// service.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the policy. Required if admin wants to
	// create a service for another policy. Changing this creates a new policy.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type IkePolicyV2Observation struct {

	// The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512.
	// Default is sha1. Changing this updates the algorithm of the existing policy.
	AuthAlgorithm *string `json:"authAlgorithm,omitempty" tf:"auth_algorithm,omitempty"`

	// The human-readable description for the policy.
	// Changing this updates the description of the existing policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on.
	// The default value is aes-128. Changing this updates the existing policy.
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The IKE mode. A valid value is v1 or v2. Default is v1.
	// Changing this updates the existing policy.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The lifetime of the security association. Consists of Unit and Value.
	Lifetime []LifetimeObservation `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// The name of the policy. Changing this updates the name of
	// the existing policy.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5.
	// Changing this updates the existing policy.
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The IKE mode. A valid value is main, which is the default.
	// Changing this updates the existing policy.
	Phase1NegotiationMode *string `json:"phase1NegotiationMode,omitempty" tf:"phase1_negotiation_mode,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VPN service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// service.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the policy. Required if admin wants to
	// create a service for another policy. Changing this creates a new policy.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type IkePolicyV2Parameters struct {

	// The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512.
	// Default is sha1. Changing this updates the algorithm of the existing policy.
	// +kubebuilder:validation:Optional
	AuthAlgorithm *string `json:"authAlgorithm,omitempty" tf:"auth_algorithm,omitempty"`

	// The human-readable description for the policy.
	// Changing this updates the description of the existing policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on.
	// The default value is aes-128. Changing this updates the existing policy.
	// +kubebuilder:validation:Optional
	EncryptionAlgorithm *string `json:"encryptionAlgorithm,omitempty" tf:"encryption_algorithm,omitempty"`

	// The IKE mode. A valid value is v1 or v2. Default is v1.
	// Changing this updates the existing policy.
	// +kubebuilder:validation:Optional
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The lifetime of the security association. Consists of Unit and Value.
	// +kubebuilder:validation:Optional
	Lifetime []LifetimeParameters `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// The name of the policy. Changing this updates the name of
	// the existing policy.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5.
	// Changing this updates the existing policy.
	// +kubebuilder:validation:Optional
	Pfs *string `json:"pfs,omitempty" tf:"pfs,omitempty"`

	// The IKE mode. A valid value is main, which is the default.
	// Changing this updates the existing policy.
	// +kubebuilder:validation:Optional
	Phase1NegotiationMode *string `json:"phase1NegotiationMode,omitempty" tf:"phase1_negotiation_mode,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a VPN service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// service.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The owner of the policy. Required if admin wants to
	// create a service for another policy. Changing this creates a new policy.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type LifetimeInitParameters struct {
	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	// The value for the lifetime of the security association. Must be a positive integer.
	// Default is 3600.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type LifetimeObservation struct {
	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	// The value for the lifetime of the security association. Must be a positive integer.
	// Default is 3600.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type LifetimeParameters struct {

	// +kubebuilder:validation:Optional
	Units *string `json:"units,omitempty" tf:"units,omitempty"`

	// The value for the lifetime of the security association. Must be a positive integer.
	// Default is 3600.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

// IkePolicyV2Spec defines the desired state of IkePolicyV2
type IkePolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IkePolicyV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IkePolicyV2InitParameters `json:"initProvider,omitempty"`
}

// IkePolicyV2Status defines the observed state of IkePolicyV2.
type IkePolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IkePolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IkePolicyV2 is the Schema for the IkePolicyV2s API. Manages a V2 Neutron IKE policy resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type IkePolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IkePolicyV2Spec   `json:"spec"`
	Status            IkePolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IkePolicyV2List contains a list of IkePolicyV2s
type IkePolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IkePolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	IkePolicyV2_Kind             = "IkePolicyV2"
	IkePolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IkePolicyV2_Kind}.String()
	IkePolicyV2_KindAPIVersion   = IkePolicyV2_Kind + "." + CRDGroupVersion.String()
	IkePolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(IkePolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&IkePolicyV2{}, &IkePolicyV2List{})
}
