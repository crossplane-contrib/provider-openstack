// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingipV2InitParameters struct {

	// The name of the pool from which to obtain the floating
	// IP. Changing this creates a new floating IP.
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type FloatingipV2Observation struct {

	// The actual floating IP address itself.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// The fixed IP address corresponding to the floating IP.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// UUID of the compute instance associated with the floating IP.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The name of the pool from which to obtain the floating
	// IP. Changing this creates a new floating IP.
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type FloatingipV2Parameters struct {

	// The name of the pool from which to obtain the floating
	// IP. Changing this creates a new floating IP.
	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a floating IP that can be used with
	// a compute instance. If omitted, the region argument of the provider
	// is used. Changing this creates a new floating IP (which may or may not
	// have a different address).
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// FloatingipV2Spec defines the desired state of FloatingipV2
type FloatingipV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingipV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FloatingipV2InitParameters `json:"initProvider,omitempty"`
}

// FloatingipV2Status defines the observed state of FloatingipV2.
type FloatingipV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingipV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipV2 is the Schema for the FloatingipV2s API. Manages a V2 floating IP resource within OpenStack Nova (compute).
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type FloatingipV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.pool) || (has(self.initProvider) && has(self.initProvider.pool))",message="spec.forProvider.pool is a required parameter"
	Spec   FloatingipV2Spec   `json:"spec"`
	Status FloatingipV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingipV2List contains a list of FloatingipV2s
type FloatingipV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingipV2 `json:"items"`
}

// Repository type metadata.
var (
	FloatingipV2_Kind             = "FloatingipV2"
	FloatingipV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingipV2_Kind}.String()
	FloatingipV2_KindAPIVersion   = FloatingipV2_Kind + "." + CRDGroupVersion.String()
	FloatingipV2_GroupVersionKind = CRDGroupVersion.WithKind(FloatingipV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingipV2{}, &FloatingipV2List{})
}
