// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeAttachV2InitParameters struct {

	// The device of the volume attachment (ex: /dev/vdc).
	// NOTE: Being able to specify a device is dependent upon the hypervisor in
	// use. Please use with caution.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the Instance to attach the Volume to.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Enable attachment of multiattach-capable volumes.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a volume attachment. If omitted, the
	// region argument of the provider is used. Changing this creates a
	// new volume attachment.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional vendor-specific options.
	// Supported options are described below.
	VendorOptions []VolumeAttachV2VendorOptionsInitParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`

	// The ID of the Volume to attach to an Instance.
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachV2Observation struct {

	// The device of the volume attachment (ex: /dev/vdc).
	// NOTE: Being able to specify a device is dependent upon the hypervisor in
	// use. Please use with caution.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Instance to attach the Volume to.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Enable attachment of multiattach-capable volumes.
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a volume attachment. If omitted, the
	// region argument of the provider is used. Changing this creates a
	// new volume attachment.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional vendor-specific options.
	// Supported options are described below.
	VendorOptions []VolumeAttachV2VendorOptionsObservation `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`

	// The ID of the Volume to attach to an Instance.
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachV2Parameters struct {

	// The device of the volume attachment (ex: /dev/vdc).
	// NOTE: Being able to specify a device is dependent upon the hypervisor in
	// use. Please use with caution.
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// The ID of the Instance to attach the Volume to.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Enable attachment of multiattach-capable volumes.
	// +kubebuilder:validation:Optional
	Multiattach *bool `json:"multiattach,omitempty" tf:"multiattach,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a volume attachment. If omitted, the
	// region argument of the provider is used. Changing this creates a
	// new volume attachment.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Map of additional vendor-specific options.
	// Supported options are described below.
	// +kubebuilder:validation:Optional
	VendorOptions []VolumeAttachV2VendorOptionsParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`

	// The ID of the Volume to attach to an Instance.
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachV2VendorOptionsInitParameters struct {

	// Boolean to control whether
	// to ignore volume status confirmation of the attached volume. This can be helpful
	// to work with some OpenStack clouds which don't have the Block Storage V3 API available.
	IgnoreVolumeConfirmation *bool `json:"ignoreVolumeConfirmation,omitempty" tf:"ignore_volume_confirmation,omitempty"`
}

type VolumeAttachV2VendorOptionsObservation struct {

	// Boolean to control whether
	// to ignore volume status confirmation of the attached volume. This can be helpful
	// to work with some OpenStack clouds which don't have the Block Storage V3 API available.
	IgnoreVolumeConfirmation *bool `json:"ignoreVolumeConfirmation,omitempty" tf:"ignore_volume_confirmation,omitempty"`
}

type VolumeAttachV2VendorOptionsParameters struct {

	// Boolean to control whether
	// to ignore volume status confirmation of the attached volume. This can be helpful
	// to work with some OpenStack clouds which don't have the Block Storage V3 API available.
	// +kubebuilder:validation:Optional
	IgnoreVolumeConfirmation *bool `json:"ignoreVolumeConfirmation,omitempty" tf:"ignore_volume_confirmation,omitempty"`
}

// VolumeAttachV2Spec defines the desired state of VolumeAttachV2
type VolumeAttachV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeAttachV2InitParameters `json:"initProvider,omitempty"`
}

// VolumeAttachV2Status defines the observed state of VolumeAttachV2.
type VolumeAttachV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachV2 is the Schema for the VolumeAttachV2s API. Attaches a Block Storage Volume to an Instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type VolumeAttachV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.volumeId) || (has(self.initProvider) && has(self.initProvider.volumeId))",message="spec.forProvider.volumeId is a required parameter"
	Spec   VolumeAttachV2Spec   `json:"spec"`
	Status VolumeAttachV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachV2List contains a list of VolumeAttachV2s
type VolumeAttachV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachV2 `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachV2_Kind             = "VolumeAttachV2"
	VolumeAttachV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttachV2_Kind}.String()
	VolumeAttachV2_KindAPIVersion   = VolumeAttachV2_Kind + "." + CRDGroupVersion.String()
	VolumeAttachV2_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttachV2_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttachV2{}, &VolumeAttachV2List{})
}
