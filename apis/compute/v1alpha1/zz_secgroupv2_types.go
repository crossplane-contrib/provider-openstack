// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleInitParameters struct {

	// Required if from_group_id or self is empty. The IP range
	// that will be the source of network traffic to the security group. Use 0.0.0.0/0
	// to allow all IP addresses. Changing this creates a new security group rule. Cannot
	// be combined with from_group_id or self.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Required if cidr or self is empty. The ID of a
	// group from which to forward traffic to the parent group. Changing this creates a
	// new security group rule. Cannot be combined with cidr or self.
	FromGroupID *string `json:"fromGroupId,omitempty" tf:"from_group_id,omitempty"`

	// An integer representing the lower bound of the port
	// range to open. Changing this creates a new security group rule.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	// The protocol type that will be allowed. Changing
	// this creates a new security group rule.
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Required if cidr and from_group_id is empty. If true,
	// the security group itself will be added as a source to this ingress rule. Cannot
	// be combined with cidr or from_group_id.
	Self *bool `json:"self,omitempty" tf:"self,omitempty"`

	// An integer representing the upper bound of the port
	// range to open. Changing this creates a new security group rule.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type RuleObservation struct {

	// Required if from_group_id or self is empty. The IP range
	// that will be the source of network traffic to the security group. Use 0.0.0.0/0
	// to allow all IP addresses. Changing this creates a new security group rule. Cannot
	// be combined with from_group_id or self.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Required if cidr or self is empty. The ID of a
	// group from which to forward traffic to the parent group. Changing this creates a
	// new security group rule. Cannot be combined with cidr or self.
	FromGroupID *string `json:"fromGroupId,omitempty" tf:"from_group_id,omitempty"`

	// An integer representing the lower bound of the port
	// range to open. Changing this creates a new security group rule.
	FromPort *float64 `json:"fromPort,omitempty" tf:"from_port,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The protocol type that will be allowed. Changing
	// this creates a new security group rule.
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Required if cidr and from_group_id is empty. If true,
	// the security group itself will be added as a source to this ingress rule. Cannot
	// be combined with cidr or from_group_id.
	Self *bool `json:"self,omitempty" tf:"self,omitempty"`

	// An integer representing the upper bound of the port
	// range to open. Changing this creates a new security group rule.
	ToPort *float64 `json:"toPort,omitempty" tf:"to_port,omitempty"`
}

type RuleParameters struct {

	// Required if from_group_id or self is empty. The IP range
	// that will be the source of network traffic to the security group. Use 0.0.0.0/0
	// to allow all IP addresses. Changing this creates a new security group rule. Cannot
	// be combined with from_group_id or self.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Required if cidr or self is empty. The ID of a
	// group from which to forward traffic to the parent group. Changing this creates a
	// new security group rule. Cannot be combined with cidr or self.
	// +kubebuilder:validation:Optional
	FromGroupID *string `json:"fromGroupId,omitempty" tf:"from_group_id,omitempty"`

	// An integer representing the lower bound of the port
	// range to open. Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	FromPort *float64 `json:"fromPort" tf:"from_port,omitempty"`

	// The protocol type that will be allowed. Changing
	// this creates a new security group rule.
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol" tf:"ip_protocol,omitempty"`

	// Required if cidr and from_group_id is empty. If true,
	// the security group itself will be added as a source to this ingress rule. Cannot
	// be combined with cidr or from_group_id.
	// +kubebuilder:validation:Optional
	Self *bool `json:"self,omitempty" tf:"self,omitempty"`

	// An integer representing the upper bound of the port
	// range to open. Changing this creates a new security group rule.
	// +kubebuilder:validation:Optional
	ToPort *float64 `json:"toPort" tf:"to_port,omitempty"`
}

type SecgroupV2InitParameters struct {

	// A description for the security group. Changing this
	// updates the description of an existing security group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the security group. Changing this
	// updates the name of an existing security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a security group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A rule describing how the security group operates. The
	// rule object structure is documented below. Changing this updates the
	// security group rules. As shown in the example above, multiple rule blocks
	// may be used.
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type SecgroupV2Observation struct {

	// A description for the security group. Changing this
	// updates the description of an existing security group.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the security group. Changing this
	// updates the name of an existing security group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a security group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security group.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A rule describing how the security group operates. The
	// rule object structure is documented below. Changing this updates the
	// security group rules. As shown in the example above, multiple rule blocks
	// may be used.
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type SecgroupV2Parameters struct {

	// A description for the security group. Changing this
	// updates the description of an existing security group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the security group. Changing this
	// updates the name of an existing security group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// A Compute client is needed to create a security group. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security group.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A rule describing how the security group operates. The
	// rule object structure is documented below. Changing this updates the
	// security group rules. As shown in the example above, multiple rule blocks
	// may be used.
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

// SecgroupV2Spec defines the desired state of SecgroupV2
type SecgroupV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecgroupV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecgroupV2InitParameters `json:"initProvider,omitempty"`
}

// SecgroupV2Status defines the observed state of SecgroupV2.
type SecgroupV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecgroupV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupV2 is the Schema for the SecgroupV2s API. Manages a V2 security group resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type SecgroupV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   SecgroupV2Spec   `json:"spec"`
	Status SecgroupV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecgroupV2List contains a list of SecgroupV2s
type SecgroupV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecgroupV2 `json:"items"`
}

// Repository type metadata.
var (
	SecgroupV2_Kind             = "SecgroupV2"
	SecgroupV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecgroupV2_Kind}.String()
	SecgroupV2_KindAPIVersion   = SecgroupV2_Kind + "." + CRDGroupVersion.String()
	SecgroupV2_GroupVersionKind = CRDGroupVersion.WithKind(SecgroupV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SecgroupV2{}, &SecgroupV2List{})
}
