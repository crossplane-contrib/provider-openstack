/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlavorV2Observation struct {

	// The description of the flavor. Changing this
	// updates the description of the flavor. Requires microversion >= 2.55.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The amount of disk space in GiB to use for the root
	// (/) partition. Changing this creates a new flavor.
	Disk *float64 `json:"disk,omitempty" tf:"disk,omitempty"`

	// The amount of ephemeral in GiB. If unspecified,
	// the default is 0. Changing this creates a new flavor.
	Ephemeral *float64 `json:"ephemeral,omitempty" tf:"ephemeral,omitempty"`

	// Key/Value pairs of metadata for the flavor.
	ExtraSpecs map[string]*string `json:"extraSpecs,omitempty" tf:"extra_specs,omitempty"`

	// Unique ID (integer or UUID) of flavor to create. Changing
	// this creates a new flavor.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether the flavor is public. Changing this creates
	// a new flavor.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// A unique name for the flavor. Changing this creates a new
	// flavor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The amount of RAM to use, in megabytes. Changing this
	// creates a new flavor.
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// Flavors are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new flavor.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// RX/TX bandwith factor. The default is 1. Changing
	// this creates a new flavor.
	RxTxFactor *float64 `json:"rxTxFactor,omitempty" tf:"rx_tx_factor,omitempty"`

	// The amount of disk space in megabytes to use. If
	// unspecified, the default is 0. Changing this creates a new flavor.
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`

	// The number of virtual CPUs to use. Changing this creates
	// a new flavor.
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

type FlavorV2Parameters struct {

	// The description of the flavor. Changing this
	// updates the description of the flavor. Requires microversion >= 2.55.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The amount of disk space in GiB to use for the root
	// (/) partition. Changing this creates a new flavor.
	// +kubebuilder:validation:Optional
	Disk *float64 `json:"disk,omitempty" tf:"disk,omitempty"`

	// The amount of ephemeral in GiB. If unspecified,
	// the default is 0. Changing this creates a new flavor.
	// +kubebuilder:validation:Optional
	Ephemeral *float64 `json:"ephemeral,omitempty" tf:"ephemeral,omitempty"`

	// Key/Value pairs of metadata for the flavor.
	// +kubebuilder:validation:Optional
	ExtraSpecs map[string]*string `json:"extraSpecs,omitempty" tf:"extra_specs,omitempty"`

	// Unique ID (integer or UUID) of flavor to create. Changing
	// this creates a new flavor.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Whether the flavor is public. Changing this creates
	// a new flavor.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// A unique name for the flavor. Changing this creates a new
	// flavor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The amount of RAM to use, in megabytes. Changing this
	// creates a new flavor.
	// +kubebuilder:validation:Optional
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// The region in which to obtain the V2 Compute client.
	// Flavors are associated with accounts, but a Compute client is needed to
	// create one. If omitted, the region argument of the provider is used.
	// Changing this creates a new flavor.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// RX/TX bandwith factor. The default is 1. Changing
	// this creates a new flavor.
	// +kubebuilder:validation:Optional
	RxTxFactor *float64 `json:"rxTxFactor,omitempty" tf:"rx_tx_factor,omitempty"`

	// The amount of disk space in megabytes to use. If
	// unspecified, the default is 0. Changing this creates a new flavor.
	// +kubebuilder:validation:Optional
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`

	// The number of virtual CPUs to use. Changing this creates
	// a new flavor.
	// +kubebuilder:validation:Optional
	Vcpus *float64 `json:"vcpus,omitempty" tf:"vcpus,omitempty"`
}

// FlavorV2Spec defines the desired state of FlavorV2
type FlavorV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlavorV2Parameters `json:"forProvider"`
}

// FlavorV2Status defines the observed state of FlavorV2.
type FlavorV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlavorV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FlavorV2 is the Schema for the FlavorV2s API. Manages a V2 flavor resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type FlavorV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.disk)",message="disk is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ram)",message="ram is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.vcpus)",message="vcpus is a required parameter"
	Spec   FlavorV2Spec   `json:"spec"`
	Status FlavorV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlavorV2List contains a list of FlavorV2s
type FlavorV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlavorV2 `json:"items"`
}

// Repository type metadata.
var (
	FlavorV2_Kind             = "FlavorV2"
	FlavorV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FlavorV2_Kind}.String()
	FlavorV2_KindAPIVersion   = FlavorV2_Kind + "." + CRDGroupVersion.String()
	FlavorV2_GroupVersionKind = CRDGroupVersion.WithKind(FlavorV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FlavorV2{}, &FlavorV2List{})
}
