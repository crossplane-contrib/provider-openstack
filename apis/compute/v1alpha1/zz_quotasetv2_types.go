// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotasetV2InitParameters struct {

	// Quota value for cores.
	// Changing this updates the existing quotaset.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Quota value for fixed IPs.
	// Changing this updates the existing quotaset.
	FixedIps *float64 `json:"fixedIps,omitempty" tf:"fixed_ips,omitempty"`

	// Quota value for floating IPs.
	// Changing this updates the existing quotaset.
	FloatingIps *float64 `json:"floatingIps,omitempty" tf:"floating_ips,omitempty"`

	// Quota value for content bytes
	// of injected files. Changing this updates the existing quotaset.
	InjectedFileContentBytes *float64 `json:"injectedFileContentBytes,omitempty" tf:"injected_file_content_bytes,omitempty"`

	// Quota value for path bytes of
	// injected files. Changing this updates the existing quotaset.
	InjectedFilePathBytes *float64 `json:"injectedFilePathBytes,omitempty" tf:"injected_file_path_bytes,omitempty"`

	// Quota value for injected files.
	// Changing this updates the existing quotaset.
	InjectedFiles *float64 `json:"injectedFiles,omitempty" tf:"injected_files,omitempty"`

	// Quota value for instances.
	// Changing this updates the existing quotaset.
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// Quota value for key pairs.
	// Changing this updates the existing quotaset.
	KeyPairs *float64 `json:"keyPairs,omitempty" tf:"key_pairs,omitempty"`

	// Quota value for metadata items.
	// Changing this updates the existing quotaset.
	MetadataItems *float64 `json:"metadataItems,omitempty" tf:"metadata_items,omitempty"`

	// Quota value for RAM.
	// Changing this updates the existing quotaset.
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new quotaset.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quotaset.
	SecurityGroupRules *float64 `json:"securityGroupRules,omitempty" tf:"security_group_rules,omitempty"`

	// Quota value for security groups.
	// Changing this updates the existing quotaset.
	SecurityGroups *float64 `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Quota value for server groups members.
	// Changing this updates the existing quotaset.
	ServerGroupMembers *float64 `json:"serverGroupMembers,omitempty" tf:"server_group_members,omitempty"`

	// Quota value for server groups.
	// Changing this updates the existing quotaset.
	ServerGroups *float64 `json:"serverGroups,omitempty" tf:"server_groups,omitempty"`
}

type QuotasetV2Observation struct {

	// Quota value for cores.
	// Changing this updates the existing quotaset.
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Quota value for fixed IPs.
	// Changing this updates the existing quotaset.
	FixedIps *float64 `json:"fixedIps,omitempty" tf:"fixed_ips,omitempty"`

	// Quota value for floating IPs.
	// Changing this updates the existing quotaset.
	FloatingIps *float64 `json:"floatingIps,omitempty" tf:"floating_ips,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Quota value for content bytes
	// of injected files. Changing this updates the existing quotaset.
	InjectedFileContentBytes *float64 `json:"injectedFileContentBytes,omitempty" tf:"injected_file_content_bytes,omitempty"`

	// Quota value for path bytes of
	// injected files. Changing this updates the existing quotaset.
	InjectedFilePathBytes *float64 `json:"injectedFilePathBytes,omitempty" tf:"injected_file_path_bytes,omitempty"`

	// Quota value for injected files.
	// Changing this updates the existing quotaset.
	InjectedFiles *float64 `json:"injectedFiles,omitempty" tf:"injected_files,omitempty"`

	// Quota value for instances.
	// Changing this updates the existing quotaset.
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// Quota value for key pairs.
	// Changing this updates the existing quotaset.
	KeyPairs *float64 `json:"keyPairs,omitempty" tf:"key_pairs,omitempty"`

	// Quota value for metadata items.
	// Changing this updates the existing quotaset.
	MetadataItems *float64 `json:"metadataItems,omitempty" tf:"metadata_items,omitempty"`

	// ID of the project to manage quotas.
	// Changing this creates a new quotaset.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Quota value for RAM.
	// Changing this updates the existing quotaset.
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new quotaset.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quotaset.
	SecurityGroupRules *float64 `json:"securityGroupRules,omitempty" tf:"security_group_rules,omitempty"`

	// Quota value for security groups.
	// Changing this updates the existing quotaset.
	SecurityGroups *float64 `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Quota value for server groups members.
	// Changing this updates the existing quotaset.
	ServerGroupMembers *float64 `json:"serverGroupMembers,omitempty" tf:"server_group_members,omitempty"`

	// Quota value for server groups.
	// Changing this updates the existing quotaset.
	ServerGroups *float64 `json:"serverGroups,omitempty" tf:"server_groups,omitempty"`
}

type QuotasetV2Parameters struct {

	// Quota value for cores.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	Cores *float64 `json:"cores,omitempty" tf:"cores,omitempty"`

	// Quota value for fixed IPs.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	FixedIps *float64 `json:"fixedIps,omitempty" tf:"fixed_ips,omitempty"`

	// Quota value for floating IPs.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	FloatingIps *float64 `json:"floatingIps,omitempty" tf:"floating_ips,omitempty"`

	// Quota value for content bytes
	// of injected files. Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	InjectedFileContentBytes *float64 `json:"injectedFileContentBytes,omitempty" tf:"injected_file_content_bytes,omitempty"`

	// Quota value for path bytes of
	// injected files. Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	InjectedFilePathBytes *float64 `json:"injectedFilePathBytes,omitempty" tf:"injected_file_path_bytes,omitempty"`

	// Quota value for injected files.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	InjectedFiles *float64 `json:"injectedFiles,omitempty" tf:"injected_files,omitempty"`

	// Quota value for instances.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	Instances *float64 `json:"instances,omitempty" tf:"instances,omitempty"`

	// Quota value for key pairs.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	KeyPairs *float64 `json:"keyPairs,omitempty" tf:"key_pairs,omitempty"`

	// Quota value for metadata items.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	MetadataItems *float64 `json:"metadataItems,omitempty" tf:"metadata_items,omitempty"`

	// ID of the project to manage quotas.
	// Changing this creates a new quotaset.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/identity/v1alpha1.ProjectV3
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a ProjectV3 in identity to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// Quota value for RAM.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	RAM *float64 `json:"ram,omitempty" tf:"ram,omitempty"`

	// The region in which to create the volume. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new quotaset.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Quota value for security group rules.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	SecurityGroupRules *float64 `json:"securityGroupRules,omitempty" tf:"security_group_rules,omitempty"`

	// Quota value for security groups.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	SecurityGroups *float64 `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Quota value for server groups members.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	ServerGroupMembers *float64 `json:"serverGroupMembers,omitempty" tf:"server_group_members,omitempty"`

	// Quota value for server groups.
	// Changing this updates the existing quotaset.
	// +kubebuilder:validation:Optional
	ServerGroups *float64 `json:"serverGroups,omitempty" tf:"server_groups,omitempty"`
}

// QuotasetV2Spec defines the desired state of QuotasetV2
type QuotasetV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QuotasetV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QuotasetV2InitParameters `json:"initProvider,omitempty"`
}

// QuotasetV2Status defines the observed state of QuotasetV2.
type QuotasetV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QuotasetV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuotasetV2 is the Schema for the QuotasetV2s API. Manages a V2 compute quotaset resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type QuotasetV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotasetV2Spec   `json:"spec"`
	Status            QuotasetV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuotasetV2List contains a list of QuotasetV2s
type QuotasetV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuotasetV2 `json:"items"`
}

// Repository type metadata.
var (
	QuotasetV2_Kind             = "QuotasetV2"
	QuotasetV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QuotasetV2_Kind}.String()
	QuotasetV2_KindAPIVersion   = QuotasetV2_Kind + "." + CRDGroupVersion.String()
	QuotasetV2_GroupVersionKind = CRDGroupVersion.WithKind(QuotasetV2_Kind)
)

func init() {
	SchemeBuilder.Register(&QuotasetV2{}, &QuotasetV2List{})
}
