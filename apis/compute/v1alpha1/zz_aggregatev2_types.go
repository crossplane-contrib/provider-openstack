// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregateV2InitParameters struct {

	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the Host Aggregate
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the Host Aggregate. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type AggregateV2Observation struct {

	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the Host Aggregate
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the Host Aggregate. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type AggregateV2Parameters struct {

	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The name of the Host Aggregate
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the Host Aggregate. If
	// omitted, the region argument of the provider is used. Changing this
	// creates a new Host Aggregate.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// AggregateV2Spec defines the desired state of AggregateV2
type AggregateV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AggregateV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AggregateV2InitParameters `json:"initProvider,omitempty"`
}

// AggregateV2Status defines the observed state of AggregateV2.
type AggregateV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AggregateV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateV2 is the Schema for the AggregateV2s API. Manages a Host Aggregate within Openstack Nova
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type AggregateV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AggregateV2Spec   `json:"spec"`
	Status AggregateV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AggregateV2List contains a list of AggregateV2s
type AggregateV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AggregateV2 `json:"items"`
}

// Repository type metadata.
var (
	AggregateV2_Kind             = "AggregateV2"
	AggregateV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AggregateV2_Kind}.String()
	AggregateV2_KindAPIVersion   = AggregateV2_Kind + "." + CRDGroupVersion.String()
	AggregateV2_GroupVersionKind = CRDGroupVersion.WithKind(AggregateV2_Kind)
)

func init() {
	SchemeBuilder.Register(&AggregateV2{}, &AggregateV2List{})
}
