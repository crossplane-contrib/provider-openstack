// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityserviceV2InitParameters struct {

	// The security service DNS IP address that is used inside the
	// tenant network.
	DNSIP *string `json:"dnsIp,omitempty" tf:"dns_ip,omitempty"`

	// The human-readable description for the security service.
	// Changing this updates the description of the existing security service.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The security service domain.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The name of the security service. Changing this updates the name
	// of the existing security service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The security service ou. An organizational unit can be added to
	// specify where the share ends up. New in Manila microversion 2.44.
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a security service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security service.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The security service host name or IP address.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The security service type - can either be active_directory,
	// kerberos or ldap.  Changing this updates the existing security service.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The security service user or group name that is used by the
	// tenant.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SecurityserviceV2Observation struct {

	// The security service DNS IP address that is used inside the
	// tenant network.
	DNSIP *string `json:"dnsIp,omitempty" tf:"dns_ip,omitempty"`

	// The human-readable description for the security service.
	// Changing this updates the description of the existing security service.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The security service domain.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The unique ID for the Security Service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the security service. Changing this updates the name
	// of the existing security service.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The security service ou. An organizational unit can be added to
	// specify where the share ends up. New in Manila microversion 2.44.
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// The owner of the Security Service.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a security service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security service.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The security service host name or IP address.
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The security service type - can either be active_directory,
	// kerberos or ldap.  Changing this updates the existing security service.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The security service user or group name that is used by the
	// tenant.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type SecurityserviceV2Parameters struct {

	// The security service DNS IP address that is used inside the
	// tenant network.
	// +kubebuilder:validation:Optional
	DNSIP *string `json:"dnsIp,omitempty" tf:"dns_ip,omitempty"`

	// The human-readable description for the security service.
	// Changing this updates the description of the existing security service.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The security service domain.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The name of the security service. Changing this updates the name
	// of the existing security service.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The security service ou. An organizational unit can be added to
	// specify where the share ends up. New in Manila microversion 2.44.
	// +kubebuilder:validation:Optional
	Ou *string `json:"ou,omitempty" tf:"ou,omitempty"`

	// The user password, if you specify a user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The region in which to obtain the V2 Shared File System client.
	// A Shared File System client is needed to create a security service. If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// security service.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The security service host name or IP address.
	// +kubebuilder:validation:Optional
	Server *string `json:"server,omitempty" tf:"server,omitempty"`

	// The security service type - can either be active_directory,
	// kerberos or ldap.  Changing this updates the existing security service.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The security service user or group name that is used by the
	// tenant.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// SecurityserviceV2Spec defines the desired state of SecurityserviceV2
type SecurityserviceV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityserviceV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityserviceV2InitParameters `json:"initProvider,omitempty"`
}

// SecurityserviceV2Status defines the observed state of SecurityserviceV2.
type SecurityserviceV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityserviceV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityserviceV2 is the Schema for the SecurityserviceV2s API. Configure a Shared File System security service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type SecurityserviceV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   SecurityserviceV2Spec   `json:"spec"`
	Status SecurityserviceV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityserviceV2List contains a list of SecurityserviceV2s
type SecurityserviceV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityserviceV2 `json:"items"`
}

// Repository type metadata.
var (
	SecurityserviceV2_Kind             = "SecurityserviceV2"
	SecurityserviceV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityserviceV2_Kind}.String()
	SecurityserviceV2_KindAPIVersion   = SecurityserviceV2_Kind + "." + CRDGroupVersion.String()
	SecurityserviceV2_GroupVersionKind = CRDGroupVersion.WithKind(SecurityserviceV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityserviceV2{}, &SecurityserviceV2List{})
}
