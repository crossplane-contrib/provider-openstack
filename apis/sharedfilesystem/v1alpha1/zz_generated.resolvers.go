/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-openstack/apis/networking/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ShareAccessV2.
func (mg *ShareAccessV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ShareIDRef,
		Selector:     mg.Spec.ForProvider.ShareIDSelector,
		To: reference.To{
			List:    &ShareV2List{},
			Managed: &ShareV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ShareID")
	}
	mg.Spec.ForProvider.ShareID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ShareIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ShareIDRef,
		Selector:     mg.Spec.InitProvider.ShareIDSelector,
		To: reference.To{
			List:    &ShareV2List{},
			Managed: &ShareV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ShareID")
	}
	mg.Spec.InitProvider.ShareID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ShareIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ShareV2.
func (mg *ShareV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ShareNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ShareNetworkIDRef,
		Selector:     mg.Spec.ForProvider.ShareNetworkIDSelector,
		To: reference.To{
			List:    &SharenetworkV2List{},
			Managed: &SharenetworkV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ShareNetworkID")
	}
	mg.Spec.ForProvider.ShareNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ShareNetworkIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ShareNetworkID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ShareNetworkIDRef,
		Selector:     mg.Spec.InitProvider.ShareNetworkIDSelector,
		To: reference.To{
			List:    &SharenetworkV2List{},
			Managed: &SharenetworkV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ShareNetworkID")
	}
	mg.Spec.InitProvider.ShareNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ShareNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SharenetworkV2.
func (mg *SharenetworkV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NeutronNetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NeutronNetIDRef,
		Selector:     mg.Spec.ForProvider.NeutronNetIDSelector,
		To: reference.To{
			List:    &v1alpha1.NetworkV2List{},
			Managed: &v1alpha1.NetworkV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NeutronNetID")
	}
	mg.Spec.ForProvider.NeutronNetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NeutronNetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NeutronSubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.NeutronSubnetIDRef,
		Selector:     mg.Spec.ForProvider.NeutronSubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV2List{},
			Managed: &v1alpha1.SubnetV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NeutronSubnetID")
	}
	mg.Spec.ForProvider.NeutronSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NeutronSubnetIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityServiceIds),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.ForProvider.SecurityServiceIdsRefs,
		Selector:      mg.Spec.ForProvider.SecurityServiceIdsSelector,
		To: reference.To{
			List:    &SecurityserviceV2List{},
			Managed: &SecurityserviceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityServiceIds")
	}
	mg.Spec.ForProvider.SecurityServiceIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityServiceIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NeutronNetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.NeutronNetIDRef,
		Selector:     mg.Spec.InitProvider.NeutronNetIDSelector,
		To: reference.To{
			List:    &v1alpha1.NetworkV2List{},
			Managed: &v1alpha1.NetworkV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NeutronNetID")
	}
	mg.Spec.InitProvider.NeutronNetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NeutronNetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NeutronSubnetID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.NeutronSubnetIDRef,
		Selector:     mg.Spec.InitProvider.NeutronSubnetIDSelector,
		To: reference.To{
			List:    &v1alpha1.SubnetV2List{},
			Managed: &v1alpha1.SubnetV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NeutronSubnetID")
	}
	mg.Spec.InitProvider.NeutronSubnetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NeutronSubnetIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.SecurityServiceIds),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.InitProvider.SecurityServiceIdsRefs,
		Selector:      mg.Spec.InitProvider.SecurityServiceIdsSelector,
		To: reference.To{
			List:    &SecurityserviceV2List{},
			Managed: &SecurityserviceV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SecurityServiceIds")
	}
	mg.Spec.InitProvider.SecurityServiceIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.SecurityServiceIdsRefs = mrsp.ResolvedReferences

	return nil
}
