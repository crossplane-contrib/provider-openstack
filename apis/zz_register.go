// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

// Package apis contains Kubernetes API for the provider.
package apis

import (
	"k8s.io/apimachinery/pkg/runtime"

	v1alpha1 "github.com/crossplane-contrib/provider-openstack/apis/blockstorage/v1alpha1"
	v1alpha1compute "github.com/crossplane-contrib/provider-openstack/apis/compute/v1alpha1"
	v1alpha1containerinfra "github.com/crossplane-contrib/provider-openstack/apis/containerinfra/v1alpha1"
	v1alpha1db "github.com/crossplane-contrib/provider-openstack/apis/db/v1alpha1"
	v1alpha1dns "github.com/crossplane-contrib/provider-openstack/apis/dns/v1alpha1"
	v1alpha1fw "github.com/crossplane-contrib/provider-openstack/apis/fw/v1alpha1"
	v1alpha1identity "github.com/crossplane-contrib/provider-openstack/apis/identity/v1alpha1"
	v1alpha1images "github.com/crossplane-contrib/provider-openstack/apis/images/v1alpha1"
	v1alpha1keymanager "github.com/crossplane-contrib/provider-openstack/apis/keymanager/v1alpha1"
	v1alpha1lb "github.com/crossplane-contrib/provider-openstack/apis/lb/v1alpha1"
	v1alpha1networking "github.com/crossplane-contrib/provider-openstack/apis/networking/v1alpha1"
	v1alpha1objectstorage "github.com/crossplane-contrib/provider-openstack/apis/objectstorage/v1alpha1"
	v1alpha1orchestration "github.com/crossplane-contrib/provider-openstack/apis/orchestration/v1alpha1"
	v1alpha1sharedfilesystem "github.com/crossplane-contrib/provider-openstack/apis/sharedfilesystem/v1alpha1"
	v1alpha1apis "github.com/crossplane-contrib/provider-openstack/apis/v1alpha1"
	v1beta1 "github.com/crossplane-contrib/provider-openstack/apis/v1beta1"
	v1alpha1vpnaas "github.com/crossplane-contrib/provider-openstack/apis/vpnaas/v1alpha1"
)

func init() {
	// Register the types with the Scheme so the components can map objects to GroupVersionKinds and back
	AddToSchemes = append(AddToSchemes,
		v1alpha1.SchemeBuilder.AddToScheme,
		v1alpha1compute.SchemeBuilder.AddToScheme,
		v1alpha1containerinfra.SchemeBuilder.AddToScheme,
		v1alpha1db.SchemeBuilder.AddToScheme,
		v1alpha1dns.SchemeBuilder.AddToScheme,
		v1alpha1fw.SchemeBuilder.AddToScheme,
		v1alpha1identity.SchemeBuilder.AddToScheme,
		v1alpha1images.SchemeBuilder.AddToScheme,
		v1alpha1keymanager.SchemeBuilder.AddToScheme,
		v1alpha1lb.SchemeBuilder.AddToScheme,
		v1alpha1networking.SchemeBuilder.AddToScheme,
		v1alpha1objectstorage.SchemeBuilder.AddToScheme,
		v1alpha1orchestration.SchemeBuilder.AddToScheme,
		v1alpha1sharedfilesystem.SchemeBuilder.AddToScheme,
		v1alpha1apis.SchemeBuilder.AddToScheme,
		v1beta1.SchemeBuilder.AddToScheme,
		v1alpha1vpnaas.SchemeBuilder.AddToScheme,
	)
}

// AddToSchemes may be used to add all resources defined in the project to a Scheme
var AddToSchemes runtime.SchemeBuilder

// AddToScheme adds all Resources to the Scheme
func AddToScheme(s *runtime.Scheme) error {
	return AddToSchemes.AddToScheme(s)
}
