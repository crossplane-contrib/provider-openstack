/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
Copyright 2025 Yannick Schlosser, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PersistenceInitParameters struct {

	// The name of the cookie if persistence mode is set
	// appropriately. Required if type = APP_COOKIE.
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The type of persistence mode. The current specification
	// supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PersistenceObservation struct {

	// The name of the cookie if persistence mode is set
	// appropriately. Required if type = APP_COOKIE.
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The type of persistence mode. The current specification
	// supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PersistenceParameters struct {

	// The name of the cookie if persistence mode is set
	// appropriately. Required if type = APP_COOKIE.
	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// The type of persistence mode. The current specification
	// supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type PoolV2InitParameters struct {

	// The administrative state of the pool. A valid
	// value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A list of ALPN protocols. Available protocols:
	// http/1.0, http/1.1, h2. Supported only in Octavia minor version >=
	// 2.24.
	// +listType=set
	AlpnProtocols []*string `json:"alpnProtocols,omitempty" tf:"alpn_protocols,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA certificate bundle for tls_enabled pools.
	// Supported only in Octavia minor version >= 2.8.
	CATLSContainerRef *string `json:"caTlsContainerRef,omitempty" tf:"ca_tls_container_ref,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA revocation list file for tls_enabled
	// pools. Supported only in Octavia minor version >= 2.8.
	CrlContainerRef *string `json:"crlContainerRef,omitempty" tf:"crl_container_ref,omitempty"`

	// Human-readable description for the pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The load balancing algorithm to distribute traffic
	// to the pool's members. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
	// SOURCE_IP, or SOURCE_IP_PORT.
	LBMethod *string `json:"lbMethod,omitempty" tf:"lb_method,omitempty"`

	// The Listener on which the members of the pool will
	// be associated with. Changing this creates a new pool. Note: One of
	// LoadbalancerID or ListenerID must be provided.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// The load balancer on which to provision this
	// pool. Changing this creates a new pool. Note: One of LoadbalancerID or
	// ListenerID must be provided.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Omit this field to prevent session persistence.
	// Indicates whether connections in the same session will be processed by the
	// same Pool member or not. Changing this creates a new pool.
	Persistence *PersistenceInitParameters `json:"persistence,omitempty" tf:"persistence,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS, PROXY,
	// UDP, PROXYV2 (Octavia minor version >= 2.22) or SCTP (Octavia minor
	// version >= 2.23). Changing this creates a new pool.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a pool. If omitted, the region
	// argument of the provider is used. Changing this creates a new pool.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// List of ciphers in OpenSSL format
	// (colon-separated). See
	// https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
	// Supported only in Octavia minor version >= 2.15.
	TLSCiphers *string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// The reference to the key manager service
	// secret containing a PKCS12 format certificate/key bundle for tls_enabled
	// pools for TLS client authentication to the member servers. Supported only in
	// Octavia minor version >= 2.8.
	TLSContainerRef *string `json:"tlsContainerRef,omitempty" tf:"tls_container_ref,omitempty"`

	// When true connections to backend member servers
	// will use TLS encryption. Default is false. Supported only in Octavia minor
	// version >= 2.8.
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`

	// A list of TLS protocol versions. Available
	// versions: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3. Supported only in
	// Octavia minor version >= 2.17.
	// +listType=set
	TLSVersions []*string `json:"tlsVersions,omitempty" tf:"tls_versions,omitempty"`

	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the pool.  Only administrative users can specify a tenant UUID other than
	// their own. Changing this creates a new pool.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type PoolV2Observation struct {

	// The administrative state of the pool. A valid
	// value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A list of ALPN protocols. Available protocols:
	// http/1.0, http/1.1, h2. Supported only in Octavia minor version >=
	// 2.24.
	// +listType=set
	AlpnProtocols []*string `json:"alpnProtocols,omitempty" tf:"alpn_protocols,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA certificate bundle for tls_enabled pools.
	// Supported only in Octavia minor version >= 2.8.
	CATLSContainerRef *string `json:"caTlsContainerRef,omitempty" tf:"ca_tls_container_ref,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA revocation list file for tls_enabled
	// pools. Supported only in Octavia minor version >= 2.8.
	CrlContainerRef *string `json:"crlContainerRef,omitempty" tf:"crl_container_ref,omitempty"`

	// Human-readable description for the pool.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The unique ID for the pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The load balancing algorithm to distribute traffic
	// to the pool's members. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
	// SOURCE_IP, or SOURCE_IP_PORT.
	LBMethod *string `json:"lbMethod,omitempty" tf:"lb_method,omitempty"`

	// The Listener on which the members of the pool will
	// be associated with. Changing this creates a new pool. Note: One of
	// LoadbalancerID or ListenerID must be provided.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// The load balancer on which to provision this
	// pool. Changing this creates a new pool. Note: One of LoadbalancerID or
	// ListenerID must be provided.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Omit this field to prevent session persistence.
	// Indicates whether connections in the same session will be processed by the
	// same Pool member or not. Changing this creates a new pool.
	Persistence *PersistenceObservation `json:"persistence,omitempty" tf:"persistence,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS, PROXY,
	// UDP, PROXYV2 (Octavia minor version >= 2.22) or SCTP (Octavia minor
	// version >= 2.23). Changing this creates a new pool.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a pool. If omitted, the region
	// argument of the provider is used. Changing this creates a new pool.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// List of ciphers in OpenSSL format
	// (colon-separated). See
	// https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
	// Supported only in Octavia minor version >= 2.15.
	TLSCiphers *string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// The reference to the key manager service
	// secret containing a PKCS12 format certificate/key bundle for tls_enabled
	// pools for TLS client authentication to the member servers. Supported only in
	// Octavia minor version >= 2.8.
	TLSContainerRef *string `json:"tlsContainerRef,omitempty" tf:"tls_container_ref,omitempty"`

	// When true connections to backend member servers
	// will use TLS encryption. Default is false. Supported only in Octavia minor
	// version >= 2.8.
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`

	// A list of TLS protocol versions. Available
	// versions: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3. Supported only in
	// Octavia minor version >= 2.17.
	// +listType=set
	TLSVersions []*string `json:"tlsVersions,omitempty" tf:"tls_versions,omitempty"`

	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the pool.  Only administrative users can specify a tenant UUID other than
	// their own. Changing this creates a new pool.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type PoolV2Parameters struct {

	// The administrative state of the pool. A valid
	// value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// A list of ALPN protocols. Available protocols:
	// http/1.0, http/1.1, h2. Supported only in Octavia minor version >=
	// 2.24.
	// +kubebuilder:validation:Optional
	// +listType=set
	AlpnProtocols []*string `json:"alpnProtocols,omitempty" tf:"alpn_protocols,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA certificate bundle for tls_enabled pools.
	// Supported only in Octavia minor version >= 2.8.
	// +kubebuilder:validation:Optional
	CATLSContainerRef *string `json:"caTlsContainerRef,omitempty" tf:"ca_tls_container_ref,omitempty"`

	// The reference of the key manager service
	// secret containing a PEM format CA revocation list file for tls_enabled
	// pools. Supported only in Octavia minor version >= 2.8.
	// +kubebuilder:validation:Optional
	CrlContainerRef *string `json:"crlContainerRef,omitempty" tf:"crl_container_ref,omitempty"`

	// Human-readable description for the pool.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The load balancing algorithm to distribute traffic
	// to the pool's members. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
	// SOURCE_IP, or SOURCE_IP_PORT.
	// +kubebuilder:validation:Optional
	LBMethod *string `json:"lbMethod,omitempty" tf:"lb_method,omitempty"`

	// The Listener on which the members of the pool will
	// be associated with. Changing this creates a new pool. Note: One of
	// LoadbalancerID or ListenerID must be provided.
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// The load balancer on which to provision this
	// pool. Changing this creates a new pool. Note: One of LoadbalancerID or
	// ListenerID must be provided.
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// Human-readable name for the pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Omit this field to prevent session persistence.
	// Indicates whether connections in the same session will be processed by the
	// same Pool member or not. Changing this creates a new pool.
	// +kubebuilder:validation:Optional
	Persistence *PersistenceParameters `json:"persistence,omitempty" tf:"persistence,omitempty"`

	// The protocol - can either be TCP, HTTP, HTTPS, PROXY,
	// UDP, PROXYV2 (Octavia minor version >= 2.22) or SCTP (Octavia minor
	// version >= 2.23). Changing this creates a new pool.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a pool. If omitted, the region
	// argument of the provider is used. Changing this creates a new pool.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// List of ciphers in OpenSSL format
	// (colon-separated). See
	// https://www.openssl.org/docs/man1.1.1/man1/ciphers.html for more information.
	// Supported only in Octavia minor version >= 2.15.
	// +kubebuilder:validation:Optional
	TLSCiphers *string `json:"tlsCiphers,omitempty" tf:"tls_ciphers,omitempty"`

	// The reference to the key manager service
	// secret containing a PKCS12 format certificate/key bundle for tls_enabled
	// pools for TLS client authentication to the member servers. Supported only in
	// Octavia minor version >= 2.8.
	// +kubebuilder:validation:Optional
	TLSContainerRef *string `json:"tlsContainerRef,omitempty" tf:"tls_container_ref,omitempty"`

	// When true connections to backend member servers
	// will use TLS encryption. Default is false. Supported only in Octavia minor
	// version >= 2.8.
	// +kubebuilder:validation:Optional
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`

	// A list of TLS protocol versions. Available
	// versions: TLSv1, TLSv1.1, TLSv1.2, TLSv1.3. Supported only in
	// Octavia minor version >= 2.17.
	// +kubebuilder:validation:Optional
	// +listType=set
	TLSVersions []*string `json:"tlsVersions,omitempty" tf:"tls_versions,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the pool.  Only administrative users can specify a tenant UUID other than
	// their own. Changing this creates a new pool.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// PoolV2Spec defines the desired state of PoolV2
type PoolV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PoolV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PoolV2InitParameters `json:"initProvider,omitempty"`
}

// PoolV2Status defines the observed state of PoolV2.
type PoolV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PoolV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PoolV2 is the Schema for the PoolV2s API. Manages a V2 pool resource within OpenStack.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type PoolV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lbMethod) || (has(self.initProvider) && has(self.initProvider.lbMethod))",message="spec.forProvider.lbMethod is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   PoolV2Spec   `json:"spec"`
	Status PoolV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV2List contains a list of PoolV2s
type PoolV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PoolV2 `json:"items"`
}

// Repository type metadata.
var (
	PoolV2_Kind             = "PoolV2"
	PoolV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PoolV2_Kind}.String()
	PoolV2_KindAPIVersion   = PoolV2_Kind + "." + CRDGroupVersion.String()
	PoolV2_GroupVersionKind = CRDGroupVersion.WithKind(PoolV2_Kind)
)

func init() {
	SchemeBuilder.Register(&PoolV2{}, &PoolV2List{})
}
