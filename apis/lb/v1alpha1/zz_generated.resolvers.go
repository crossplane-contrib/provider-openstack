/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
Copyright 2025 Yannick Schlosser, Jan Dittrich
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-openstack/apis/identity/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-openstack/apis/keymanager/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this L7PolicyV2.
func (mg *L7PolicyV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ListenerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ListenerIDRef,
		Selector:     mg.Spec.ForProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV2List{},
			Managed: &ListenerV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ListenerID")
	}
	mg.Spec.ForProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RedirectPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.RedirectPoolIDRef,
		Selector:     mg.Spec.ForProvider.RedirectPoolIDSelector,
		To: reference.To{
			List:    &PoolV2List{},
			Managed: &PoolV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RedirectPoolID")
	}
	mg.Spec.ForProvider.RedirectPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RedirectPoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ListenerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ListenerIDRef,
		Selector:     mg.Spec.InitProvider.ListenerIDSelector,
		To: reference.To{
			List:    &ListenerV2List{},
			Managed: &ListenerV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ListenerID")
	}
	mg.Spec.InitProvider.ListenerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ListenerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RedirectPoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.RedirectPoolIDRef,
		Selector:     mg.Spec.InitProvider.RedirectPoolIDSelector,
		To: reference.To{
			List:    &PoolV2List{},
			Managed: &PoolV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RedirectPoolID")
	}
	mg.Spec.InitProvider.RedirectPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RedirectPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this L7RuleV2.
func (mg *L7RuleV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.L7PolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.L7PolicyIDRef,
		Selector:     mg.Spec.ForProvider.L7PolicyIDSelector,
		To: reference.To{
			List:    &L7PolicyV2List{},
			Managed: &L7PolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.L7PolicyID")
	}
	mg.Spec.ForProvider.L7PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.L7PolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.L7PolicyID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.L7PolicyIDRef,
		Selector:     mg.Spec.InitProvider.L7PolicyIDSelector,
		To: reference.To{
			List:    &L7PolicyV2List{},
			Managed: &L7PolicyV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.L7PolicyID")
	}
	mg.Spec.InitProvider.L7PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.L7PolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ListenerV2.
func (mg *ListenerV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClientCATLSContainerRef),
		Extract:      resource.ExtractParamPath("secret_ref", true),
		Reference:    mg.Spec.ForProvider.ClientCATLSContainerRefRef,
		Selector:     mg.Spec.ForProvider.ClientCATLSContainerRefSelector,
		To: reference.To{
			List:    &v1alpha1.SecretV1List{},
			Managed: &v1alpha1.SecretV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClientCATLSContainerRef")
	}
	mg.Spec.ForProvider.ClientCATLSContainerRef = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClientCATLSContainerRefRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadbalancerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV2List{},
			Managed: &LoadbalancerV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadbalancerID")
	}
	mg.Spec.ForProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadbalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClientCATLSContainerRef),
		Extract:      resource.ExtractParamPath("secret_ref", true),
		Reference:    mg.Spec.InitProvider.ClientCATLSContainerRefRef,
		Selector:     mg.Spec.InitProvider.ClientCATLSContainerRefSelector,
		To: reference.To{
			List:    &v1alpha1.SecretV1List{},
			Managed: &v1alpha1.SecretV1{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClientCATLSContainerRef")
	}
	mg.Spec.InitProvider.ClientCATLSContainerRef = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClientCATLSContainerRefRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LoadbalancerID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.LoadbalancerIDRef,
		Selector:     mg.Spec.InitProvider.LoadbalancerIDSelector,
		To: reference.To{
			List:    &LoadbalancerV2List{},
			Managed: &LoadbalancerV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LoadbalancerID")
	}
	mg.Spec.InitProvider.LoadbalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LoadbalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorV2.
func (mg *MonitorV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PoolIDRef,
		Selector:     mg.Spec.ForProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV2List{},
			Managed: &PoolV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PoolID")
	}
	mg.Spec.ForProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PoolIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PoolID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.PoolIDRef,
		Selector:     mg.Spec.InitProvider.PoolIDSelector,
		To: reference.To{
			List:    &PoolV2List{},
			Managed: &PoolV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PoolID")
	}
	mg.Spec.InitProvider.PoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this QuotaV2.
func (mg *QuotaV2) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha11.ProjectV3List{},
			Managed: &v1alpha11.ProjectV3{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	return nil
}
