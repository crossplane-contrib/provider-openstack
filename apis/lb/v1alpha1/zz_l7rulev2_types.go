// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleV2InitParameters struct {

	// The administrative state of the L7 Rule.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The comparison type for the L7 rule - can either be
	// CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// When true the logic of the rule is inverted. For example, with invert
	// true, equal to would become not equal to. Default is false.
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when type is set to COOKIE or HEADER.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// L7 Rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the L7 Rule.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Rule.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The L7 Rule type - can either be COOKIE, FILE_TYPE, HEADER,
	// HOST_NAME or PATH.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value to use for the comparison. For example, the file type to
	// compare.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type L7RuleV2Observation struct {

	// The administrative state of the L7 Rule.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The comparison type for the L7 rule - can either be
	// CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// The unique ID for the L7 Rule.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When true the logic of the rule is inverted. For example, with invert
	// true, equal to would become not equal to. Default is false.
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when type is set to COOKIE or HEADER.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// The ID of the Listener owning this resource.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// L7 Rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the L7 Rule.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Rule.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The L7 Rule type - can either be COOKIE, FILE_TYPE, HEADER,
	// HOST_NAME or PATH.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value to use for the comparison. For example, the file type to
	// compare.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type L7RuleV2Parameters struct {

	// The administrative state of the L7 Rule.
	// A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// The comparison type for the L7 rule - can either be
	// CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	// +kubebuilder:validation:Optional
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// When true the logic of the rule is inverted. For example, with invert
	// true, equal to would become not equal to. Default is false.
	// +kubebuilder:validation:Optional
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when type is set to COOKIE or HEADER.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	// +kubebuilder:validation:Optional
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// region argument of the provider is used. Changing this creates a new
	// L7 Rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Required for admins. The UUID of the tenant who owns
	// the L7 Rule.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Rule.
	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// The L7 Rule type - can either be COOKIE, FILE_TYPE, HEADER,
	// HOST_NAME or PATH.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value to use for the comparison. For example, the file type to
	// compare.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// L7RuleV2Spec defines the desired state of L7RuleV2
type L7RuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider L7RuleV2InitParameters `json:"initProvider,omitempty"`
}

// L7RuleV2Status defines the observed state of L7RuleV2.
type L7RuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2 is the Schema for the L7RuleV2s API. Manages a V2 l7rule resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type L7RuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compareType) || (has(self.initProvider) && has(self.initProvider.compareType))",message="spec.forProvider.compareType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.l7policyId) || (has(self.initProvider) && has(self.initProvider.l7policyId))",message="spec.forProvider.l7policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   L7RuleV2Spec   `json:"spec"`
	Status L7RuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2List contains a list of L7RuleV2s
type L7RuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7RuleV2 `json:"items"`
}

// Repository type metadata.
var (
	L7RuleV2_Kind             = "L7RuleV2"
	L7RuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7RuleV2_Kind}.String()
	L7RuleV2_KindAPIVersion   = L7RuleV2_Kind + "." + CRDGroupVersion.String()
	L7RuleV2_GroupVersionKind = CRDGroupVersion.WithKind(L7RuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&L7RuleV2{}, &L7RuleV2List{})
}
