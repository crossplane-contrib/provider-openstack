// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DatabaseInitParameters struct {

	// Database character set. Changing this creates a
	// new instance.
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Database collation. Changing this creates a new instance.
	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	// Database to be created on new instance. Changing this creates a
	// new instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DatabaseObservation struct {

	// Database character set. Changing this creates a
	// new instance.
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Database collation. Changing this creates a new instance.
	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	// Database to be created on new instance. Changing this creates a
	// new instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type DatabaseParameters struct {

	// Database character set. Changing this creates a
	// new instance.
	// +kubebuilder:validation:Optional
	Charset *string `json:"charset,omitempty" tf:"charset,omitempty"`

	// Database collation. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Collate *string `json:"collate,omitempty" tf:"collate,omitempty"`

	// Database to be created on new instance. Changing this creates a
	// new instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type InstanceV1DatastoreInitParameters struct {

	// Database engine type to be used in new instance. Changing this
	// creates a new instance.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of database engine type to be used in new instance.
	// Changing this creates a new instance.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InstanceV1DatastoreObservation struct {

	// Database engine type to be used in new instance. Changing this
	// creates a new instance.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of database engine type to be used in new instance.
	// Changing this creates a new instance.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type InstanceV1DatastoreParameters struct {

	// Database engine type to be used in new instance. Changing this
	// creates a new instance.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Version of database engine type to be used in new instance.
	// Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type InstanceV1InitParameters struct {

	// Configuration ID to be attached to the instance. Database instance
	// will be rebooted when configuration is detached.
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// An array of database name, charset and collate. The database
	// object structure is documented below.
	Database []DatabaseInitParameters `json:"database,omitempty" tf:"database,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates a new instance.
	Datastore []InstanceV1DatastoreInitParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The flavor ID of the desired flavor for the instance.
	// Changing this creates new instance.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of one or more networks to attach to the
	// instance. The network object structure is documented below. Changing this
	// creates a new instance.
	Network []NetworkInitParameters `json:"network,omitempty" tf:"network,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the volume size in GB. Changing this creates new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// An array of username, password, host and databases. The user
	// object structure is documented below.
	User []UserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type InstanceV1Observation struct {

	// A list of IP addresses assigned to the instance.
	Addresses []*string `json:"addresses,omitempty" tf:"addresses,omitempty"`

	// Configuration ID to be attached to the instance. Database instance
	// will be rebooted when configuration is detached.
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// An array of database name, charset and collate. The database
	// object structure is documented below.
	Database []DatabaseObservation `json:"database,omitempty" tf:"database,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates a new instance.
	Datastore []InstanceV1DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The flavor ID of the desired flavor for the instance.
	// Changing this creates new instance.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of one or more networks to attach to the
	// instance. The network object structure is documented below. Changing this
	// creates a new instance.
	Network []NetworkObservation `json:"network,omitempty" tf:"network,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the volume size in GB. Changing this creates new instance.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// An array of username, password, host and databases. The user
	// object structure is documented below.
	User []UserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type InstanceV1Parameters struct {

	// Configuration ID to be attached to the instance. Database instance
	// will be rebooted when configuration is detached.
	// +kubebuilder:validation:Optional
	ConfigurationID *string `json:"configurationId,omitempty" tf:"configuration_id,omitempty"`

	// An array of database name, charset and collate. The database
	// object structure is documented below.
	// +kubebuilder:validation:Optional
	Database []DatabaseParameters `json:"database,omitempty" tf:"database,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Datastore []InstanceV1DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// The flavor ID of the desired flavor for the instance.
	// Changing this creates new instance.
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// A unique name for the resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array of one or more networks to attach to the
	// instance. The network object structure is documented below. Changing this
	// creates a new instance.
	// +kubebuilder:validation:Optional
	Network []NetworkParameters `json:"network,omitempty" tf:"network,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Specifies the volume size in GB. Changing this creates new instance.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// An array of username, password, host and databases. The user
	// object structure is documented below.
	// +kubebuilder:validation:Optional
	User []UserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type NetworkInitParameters struct {

	// Specifies a fixed IPv4 address to be used on this
	// network. Changing this creates a new instance.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// Specifies a fixed IPv6 address to be used on this
	// network. Changing this creates a new instance.
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// The port UUID of a
	// network to attach to the instance. Changing this creates a new instance.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The network UUID to
	// attach to the instance. Changing this creates a new instance.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkObservation struct {

	// Specifies a fixed IPv4 address to be used on this
	// network. Changing this creates a new instance.
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// Specifies a fixed IPv6 address to be used on this
	// network. Changing this creates a new instance.
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// The port UUID of a
	// network to attach to the instance. Changing this creates a new instance.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The network UUID to
	// attach to the instance. Changing this creates a new instance.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NetworkParameters struct {

	// Specifies a fixed IPv4 address to be used on this
	// network. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	FixedIPV4 *string `json:"fixedIpV4,omitempty" tf:"fixed_ip_v4,omitempty"`

	// Specifies a fixed IPv6 address to be used on this
	// network. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	FixedIPV6 *string `json:"fixedIpV6,omitempty" tf:"fixed_ip_v6,omitempty"`

	// The port UUID of a
	// network to attach to the instance. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The network UUID to
	// attach to the instance. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type UserInitParameters struct {

	// A list of databases that user will have access to. If not specified,
	// user has access to all databases on th einstance. Changing this creates a new instance.
	Databases []*string `json:"databases,omitempty" tf:"databases,omitempty"`

	// An ip address or % sign indicating what ip addresses can connect with
	// this user credentials. Changing this creates a new instance.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Username to be created on new instance. Changing this creates a
	// new instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type UserObservation struct {

	// A list of databases that user will have access to. If not specified,
	// user has access to all databases on th einstance. Changing this creates a new instance.
	Databases []*string `json:"databases,omitempty" tf:"databases,omitempty"`

	// An ip address or % sign indicating what ip addresses can connect with
	// this user credentials. Changing this creates a new instance.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Username to be created on new instance. Changing this creates a
	// new instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type UserParameters struct {

	// A list of databases that user will have access to. If not specified,
	// user has access to all databases on th einstance. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Databases []*string `json:"databases,omitempty" tf:"databases,omitempty"`

	// An ip address or % sign indicating what ip addresses can connect with
	// this user credentials. Changing this creates a new instance.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Username to be created on new instance. Changing this creates a
	// new instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// User's password. Changing this creates a
	// new instance.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`
}

// InstanceV1Spec defines the desired state of InstanceV1
type InstanceV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceV1InitParameters `json:"initProvider,omitempty"`
}

// InstanceV1Status defines the observed state of InstanceV1.
type InstanceV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1 is the Schema for the InstanceV1s API. Manages a V1 DB instance resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type InstanceV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastore) || (has(self.initProvider) && has(self.initProvider.datastore))",message="spec.forProvider.datastore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   InstanceV1Spec   `json:"spec"`
	Status InstanceV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceV1List contains a list of InstanceV1s
type InstanceV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceV1 `json:"items"`
}

// Repository type metadata.
var (
	InstanceV1_Kind             = "InstanceV1"
	InstanceV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceV1_Kind}.String()
	InstanceV1_KindAPIVersion   = InstanceV1_Kind + "." + CRDGroupVersion.String()
	InstanceV1_GroupVersionKind = CRDGroupVersion.WithKind(InstanceV1_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceV1{}, &InstanceV1List{})
}
