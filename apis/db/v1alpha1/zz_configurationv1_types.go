// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
Copyright 2023 Jakob Schlagenhaufer, Jan Dittrich
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationInitParameters struct {

	// Configuration parameter name. Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether or not to store configuration parameter value as string. Changing this creates a new resource. See the below note for more information.
	StringType *bool `json:"stringType,omitempty" tf:"string_type,omitempty"`

	// Configuration parameter value. Changing this creates a new resource.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationObservation struct {

	// Configuration parameter name. Changing this creates a new resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether or not to store configuration parameter value as string. Changing this creates a new resource. See the below note for more information.
	StringType *bool `json:"stringType,omitempty" tf:"string_type,omitempty"`

	// Configuration parameter value. Changing this creates a new resource.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigurationParameters struct {

	// Configuration parameter name. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Whether or not to store configuration parameter value as string. Changing this creates a new resource. See the below note for more information.
	// +kubebuilder:validation:Optional
	StringType *bool `json:"stringType,omitempty" tf:"string_type,omitempty"`

	// Configuration parameter value. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type ConfigurationV1InitParameters struct {

	// An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
	Configuration []ConfigurationInitParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates resource.
	Datastore []DatastoreInitParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ConfigurationV1Observation struct {

	// An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
	Configuration []ConfigurationObservation `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates resource.
	Datastore []DatastoreObservation `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Description of the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique name for the resource.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ConfigurationV1Parameters struct {

	// An array of configuration parameter name and value. Can be specified multiple times. The configuration object structure is documented below.
	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// An array of database engine type and version. The datastore
	// object structure is documented below. Changing this creates resource.
	// +kubebuilder:validation:Optional
	Datastore []DatastoreParameters `json:"datastore,omitempty" tf:"datastore,omitempty"`

	// Description of the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A unique name for the resource.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The region in which to create the db instance. Changing this
	// creates a new instance.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DatastoreInitParameters struct {

	// Database engine type to be used with this configuration. Changing this creates a new resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of database engine type to be used with this configuration. Changing this creates a new resource.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreObservation struct {

	// Database engine type to be used with this configuration. Changing this creates a new resource.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Version of database engine type to be used with this configuration. Changing this creates a new resource.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DatastoreParameters struct {

	// Database engine type to be used with this configuration. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Version of database engine type to be used with this configuration. Changing this creates a new resource.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

// ConfigurationV1Spec defines the desired state of ConfigurationV1
type ConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationV1Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigurationV1InitParameters `json:"initProvider,omitempty"`
}

// ConfigurationV1Status defines the observed state of ConfigurationV1.
type ConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1 is the Schema for the ConfigurationV1s API. Manages a V1 DB configuration resource within OpenStack.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstack}
type ConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.datastore) || (has(self.initProvider) && has(self.initProvider.datastore))",message="spec.forProvider.datastore is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ConfigurationV1Spec   `json:"spec"`
	Status ConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1List contains a list of ConfigurationV1s
type ConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationV1_Kind             = "ConfigurationV1"
	ConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationV1_Kind}.String()
	ConfigurationV1_KindAPIVersion   = ConfigurationV1_Kind + "." + CRDGroupVersion.String()
	ConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationV1{}, &ConfigurationV1List{})
}
