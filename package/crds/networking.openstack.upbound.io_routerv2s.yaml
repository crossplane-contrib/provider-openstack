---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: routerv2s.networking.openstack.upbound.io
spec:
  group: networking.openstack.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - openstack
    kind: RouterV2
    listKind: RouterV2List
    plural: routerv2s
    singular: routerv2
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RouterV2 is the Schema for the RouterV2s API. Manages a V2 router
          resource within OpenStack.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RouterV2Spec defines the desired state of RouterV2
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicy field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  adminStateUp:
                    description: Administrative up/down status for the router (must
                      be "true" or "false" if provided). Changing this updates the
                      admin_state_up of an existing router.
                    type: boolean
                  availabilityZoneHints:
                    description: An availability zone is used to make network resources
                      highly available. Used for resources with high availability
                      so that they are scheduled on different availability zones.
                      Changing this creates a new router.
                    items:
                      type: string
                    type: array
                  description:
                    description: Human-readable description for the router.
                    type: string
                  distributed:
                    description: Indicates whether or not to create a distributed
                      router. The default policy setting in Neutron restricts usage
                      of this property to administrative users only.
                    type: boolean
                  enableSnat:
                    description: Enable Source NAT for the router. Valid values are
                      "true" or "false". An external_network_id has to be set in order
                      to set this property. Changing this updates the enable_snat
                      of the router. Setting this value requires an ext-gw-mode extension
                      to be enabled in OpenStack Neutron.
                    type: boolean
                  externalFixedIp:
                    description: An external fixed IP for the router. This can be
                      repeated. The structure is described below. An external_network_id
                      has to be set in order to set this property. Changing this updates
                      the external fixed IPs of the router.
                    items:
                      properties:
                        ipAddress:
                          description: The IP address to set on the router.
                          type: string
                        subnetId:
                          description: Subnet in which the fixed IP belongs to.
                          type: string
                      type: object
                    type: array
                  externalGateway:
                    description: (Deprecated - use external_network_id instead) The
                      network UUID of an external gateway for the router. A router
                      with an external gateway is required if any compute instances
                      or load balancers will be using floating IPs. Changing this
                      updates the external gateway of an existing router.
                    type: string
                  externalNetworkId:
                    description: The network UUID of an external gateway for the router.
                      A router with an external gateway is required if any compute
                      instances or load balancers will be using floating IPs. Changing
                      this updates the external gateway of the router.
                    type: string
                  externalSubnetIds:
                    description: A list of external subnet IDs to try over each to
                      obtain a fixed IP for the router. If a subnet ID in a list has
                      exhausted floating IP pool, the next subnet ID will be tried.
                      This argument is used only during the router creation and allows
                      to set only one external fixed IP. Conflicts with an external_fixed_ip
                      argument.
                    items:
                      type: string
                    type: array
                  name:
                    description: A unique name for the router. Changing this updates
                      the name of an existing router.
                    type: string
                  region:
                    description: The region in which to obtain the V2 networking client.
                      A networking client is needed to create a router. If omitted,
                      the region argument of the provider is used. Changing this creates
                      a new router.
                    type: string
                  tags:
                    description: A set of string tags for the router.
                    items:
                      type: string
                    type: array
                  tenantId:
                    description: The owner of the floating IP. Required if admin wants
                      to create a router for another tenant. Changing this creates
                      a new router.
                    type: string
                  valueSpecs:
                    additionalProperties:
                      type: string
                    description: Map of additional driver-specific options.
                    type: object
                  vendorOptions:
                    description: Map of additional vendor-specific options. Supported
                      options are described below.
                    items:
                      properties:
                        setRouterGatewayAfterCreate:
                          description: Boolean to control whether the Router gateway
                            is assigned during creation or updated after creation.
                          type: boolean
                      type: object
                    type: array
                type: object
              managementPolicy:
                default: FullControl
                description: 'THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. ManagementPolicy
                  specifies the level of control Crossplane has over the managed external
                  resource. This field is planned to replace the DeletionPolicy field
                  in a future release. Currently, both could be set independently
                  and non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - FullControl
                - ObserveOnly
                - OrphanOnDelete
                type: string
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: RouterV2Status defines the observed state of RouterV2.
            properties:
              atProvider:
                properties:
                  adminStateUp:
                    description: Administrative up/down status for the router (must
                      be "true" or "false" if provided). Changing this updates the
                      admin_state_up of an existing router.
                    type: boolean
                  allTags:
                    description: The collection of tags assigned on the router, which
                      have been explicitly and implicitly added.
                    items:
                      type: string
                    type: array
                  availabilityZoneHints:
                    description: An availability zone is used to make network resources
                      highly available. Used for resources with high availability
                      so that they are scheduled on different availability zones.
                      Changing this creates a new router.
                    items:
                      type: string
                    type: array
                  description:
                    description: Human-readable description for the router.
                    type: string
                  distributed:
                    description: Indicates whether or not to create a distributed
                      router. The default policy setting in Neutron restricts usage
                      of this property to administrative users only.
                    type: boolean
                  enableSnat:
                    description: Enable Source NAT for the router. Valid values are
                      "true" or "false". An external_network_id has to be set in order
                      to set this property. Changing this updates the enable_snat
                      of the router. Setting this value requires an ext-gw-mode extension
                      to be enabled in OpenStack Neutron.
                    type: boolean
                  externalFixedIp:
                    description: An external fixed IP for the router. This can be
                      repeated. The structure is described below. An external_network_id
                      has to be set in order to set this property. Changing this updates
                      the external fixed IPs of the router.
                    items:
                      properties:
                        ipAddress:
                          description: The IP address to set on the router.
                          type: string
                        subnetId:
                          description: Subnet in which the fixed IP belongs to.
                          type: string
                      type: object
                    type: array
                  externalGateway:
                    description: (Deprecated - use external_network_id instead) The
                      network UUID of an external gateway for the router. A router
                      with an external gateway is required if any compute instances
                      or load balancers will be using floating IPs. Changing this
                      updates the external gateway of an existing router.
                    type: string
                  externalNetworkId:
                    description: The network UUID of an external gateway for the router.
                      A router with an external gateway is required if any compute
                      instances or load balancers will be using floating IPs. Changing
                      this updates the external gateway of the router.
                    type: string
                  externalSubnetIds:
                    description: A list of external subnet IDs to try over each to
                      obtain a fixed IP for the router. If a subnet ID in a list has
                      exhausted floating IP pool, the next subnet ID will be tried.
                      This argument is used only during the router creation and allows
                      to set only one external fixed IP. Conflicts with an external_fixed_ip
                      argument.
                    items:
                      type: string
                    type: array
                  id:
                    description: ID of the router.
                    type: string
                  name:
                    description: A unique name for the router. Changing this updates
                      the name of an existing router.
                    type: string
                  region:
                    description: The region in which to obtain the V2 networking client.
                      A networking client is needed to create a router. If omitted,
                      the region argument of the provider is used. Changing this creates
                      a new router.
                    type: string
                  tags:
                    description: A set of string tags for the router.
                    items:
                      type: string
                    type: array
                  tenantId:
                    description: The owner of the floating IP. Required if admin wants
                      to create a router for another tenant. Changing this creates
                      a new router.
                    type: string
                  valueSpecs:
                    additionalProperties:
                      type: string
                    description: Map of additional driver-specific options.
                    type: object
                  vendorOptions:
                    description: Map of additional vendor-specific options. Supported
                      options are described below.
                    items:
                      properties:
                        setRouterGatewayAfterCreate:
                          description: Boolean to control whether the Router gateway
                            is assigned during creation or updated after creation.
                          type: boolean
                      type: object
                    type: array
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
